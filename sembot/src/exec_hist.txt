



########################## Starting episode #########################
instruction: move hanger onto the other rackmove the hanger from one rack to the other
########################################
#### planner ####
########################################
objects = ['target rack', 'source rack', 'hanger']
# Query: move hanger onto the other rackmove the hanger from one rack to the other.
composer("grasp the hanger")
composer("back to default pose")
composer("move to 10cm on top of the source rack")
composer("open gripper")
composer("back to default pose")
composer("move to 10cm on top of the target rack")
composer("close the gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the hanger.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the hanger')
gripper_map = get_gripper_map('open everywhere except 1cm around the hanger')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['target rack', 'source rack', 'hanger']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the hanger.
affordance_map = get_empty_affordance_map()
hanger = parse_query_obj('hanger')
x, y, z = hanger.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the hanger.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the hanger
hanger = parse_query_obj('hanger')
set_voxel_by_radius(gripper_map, hanger.position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['target rack', 'source rack', 'hanger']
# Query: hanger.
hanger = detect('hanger')
ret_val = hanger


########################################
#### parse_query_obj ####
########################################
objects = ['target rack', 'source rack', 'hanger']
# Query: hanger.
hanger = detect('hanger')
ret_val = hanger


Reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: back to default pose.
reset_to_default_pose()


########################################
#### composer ####
########################################
# Query: move to 10cm on top of the source rack.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point 10cm above the source rack')
execute(movable, affordance_map=affordance_map)


########################################
#### parse_query_obj ####
########################################
objects = ['target rack', 'source rack', 'hanger']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point 10cm above the source rack.
affordance_map = get_empty_affordance_map()
source_rack = parse_query_obj('source rack')
(min_x, min_y, min_z), (max_x, max_y, max_z) = source_rack.aabb
center_x, center_y, center_z = source_rack.position
# 10cm above so we add to z-axis
x = center_x
y = center_y
z = max_z + cm2index(10, 'z')
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### parse_query_obj ####
########################################
objects = ['target rack', 'source rack', 'hanger']
# Query: source rack.
source_rack = detect('source rack')
ret_val = source_rack


Reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: open gripper.
movable = parse_query_obj('gripper')
gripper_map = get_gripper_map('open everywhere')
execute(movable, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['target rack', 'source rack', 'hanger']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
ret_val = gripper_map


Reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: back to default pose.
reset_to_default_pose()


########################################
#### composer ####
########################################
# Query: move to 10cm on top of the target rack.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point 10cm above the target rack')
execute(movable, affordance_map=affordance_map)


########################################
#### parse_query_obj ####
########################################
objects = ['target rack', 'source rack', 'hanger']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point 10cm above the target rack.
affordance_map = get_empty_affordance_map()
target_rack = parse_query_obj('target rack')
(min_x, min_y, min_z), (max_x, max_y, max_z) = target_rack.aabb
center_x, center_y, center_z = target_rack.position
# 10cm above so we add to z-axis
x = center_x
y = center_y
z = max_z + cm2index(10, 'z')
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### parse_query_obj ####
########################################
objects = ['target rack', 'source rack', 'hanger']
# Query: target rack.
target_rack = detect('target rack')
ret_val = target_rack


Reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: close the gripper.
movable = parse_query_obj('gripper')
gripper_map = get_gripper_map('close everywhere')
execute(movable, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['target rack', 'source rack', 'hanger']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_gripper_map ####
########################################
# Query: close everywhere.
gripper_map = get_empty_gripper_map()
# close everywhere
gripper_map[:, :, :] = 0
ret_val = gripper_map


Reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: back to default pose.
reset_to_default_pose()






########################## Starting episode #########################
instruction: pick up the hanger and place it on the other rack
########################################
#### planner ####
########################################
objects = ['target rack', 'source rack', 'hanger']
# Query: pick up the hanger and place it on the other rack.
composer("grasp the hanger")
composer("back to default pose")
composer("move to 10cm on top of the target rack")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the hanger.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the hanger')
gripper_map = get_gripper_map('open everywhere except 1cm around the hanger')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['target rack', 'source rack', 'hanger']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the hanger.
affordance_map = get_empty_affordance_map()
hanger = parse_query_obj('hanger')
x, y, z = hanger.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the hanger.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the hanger
hanger = parse_query_obj('hanger')
set_voxel_by_radius(gripper_map, hanger.position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['target rack', 'source rack', 'hanger']
# Query: hanger.
hanger = detect('hanger')
ret_val = hanger


########################################
#### parse_query_obj ####
########################################
objects = ['target rack', 'source rack', 'hanger']
# Query: hanger.
hanger = detect('hanger')
ret_val = hanger


Reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: back to default pose.
reset_to_default_pose()


########################################
#### composer ####
########################################
# Query: move to 10cm on top of the target rack.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point 10cm above the target rack')
execute(movable, affordance_map=affordance_map)


########################################
#### parse_query_obj ####
########################################
objects = ['target rack', 'source rack', 'hanger']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point 10cm above the target rack.
affordance_map = get_empty_affordance_map()
target_rack = parse_query_obj('target rack')
(min_x, min_y, min_z), (max_x, max_y, max_z) = target_rack.aabb
center_x, center_y, center_z = target_rack.position
# 10cm above so we add to z-axis
x = center_x
y = center_y
z = max_z + cm2index(10, 'z')
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### parse_query_obj ####
########################################
objects = ['target rack', 'source rack', 'hanger']
# Query: target rack.
target_rack = detect('target rack')
ret_val = target_rack


Reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: open gripper.
movable = parse_query_obj('gripper')
gripper_map = get_gripper_map('open everywhere')
execute(movable, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['target rack', 'source rack', 'hanger']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
ret_val = gripper_map






########################## Starting episode #########################
instruction: pick up the chicken and place it next to the grill




########################## Starting episode #########################
instruction: take the steak off the grill




########################## Starting episode #########################
instruction: take the steak off the grill




########################## Starting episode #########################
instruction: pick up the chicken and place it next to the grill




########################## Starting episode #########################
instruction: pick up the chicken and place it next to the grill




########################## Starting episode #########################
instruction: pick up the steak and place it next to the grill
########################################
#### planner ####
########################################
objects = ['grill', 'steak', 'chicken']
# Query: pick up the steak and place it next to the grill.
composer("grasp the steak")
composer("back to default pose")
composer("move to 10cm to the right of the grill")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the steak.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the steak')
gripper_map = get_gripper_map('open everywhere except 1cm around the steak')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['grill', 'steak', 'chicken']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the steak.
affordance_map = get_empty_affordance_map()
steak = parse_query_obj('steak')
x, y, z = steak.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the steak.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the steak
steak = parse_query_obj('steak')
set_voxel_by_radius(gripper_map, steak.position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['grill', 'steak', 'chicken']
# Query: steak.
steak = detect('steak')
ret_val = steak


########################################
#### parse_query_obj ####
########################################
objects = ['grill', 'steak', 'chicken']
# Query: steak.
steak = detect('steak')
ret_val = steak


Reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: back to default pose.
reset_to_default_pose()


########################################
#### composer ####
########################################
# Query: move to 10cm to the right of the grill.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point 10cm to the right of the grill')
execute(movable, affordance_map=affordance_map)


########################################
#### parse_query_obj ####
########################################
objects = ['grill', 'steak', 'chicken']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point 10cm to the right of the grill.
affordance_map = get_empty_affordance_map()
grill = parse_query_obj('grill')
(min_x, min_y, min_z), (max_x, max_y, max_z) = grill.aabb
center_x, center_y, center_z = grill.position
# 10cm to the right of so we add to y-axis
x = max_x + cm2index(10, 'y')
y = center_y
z = center_z
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### parse_query_obj ####
########################################
objects = ['grill', 'steak', 'chicken']
# Query: grill.
grill = detect('grill')
ret_val = grill


Reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: open gripper.
movable = parse_query_obj('gripper')
gripper_map = get_gripper_map('open everywhere')
execute(movable, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['grill', 'steak', 'chicken']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
ret_val = gripper_map


Reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: back to default pose.
reset_to_default_pose()






########################## Starting episode #########################
instruction: remove the steak from the grill and set it down to the side
########################################
#### planner ####
########################################
objects = ['grill', 'steak', 'chicken']
# Query: remove the steak from the grill and set it down to the side.
composer("grasp the steak")
composer("back to default pose")
composer("move to 10cm to the right of the grill")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the steak.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the steak')
gripper_map = get_gripper_map('open everywhere except 1cm around the steak')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['grill', 'steak', 'chicken']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the steak.
affordance_map = get_empty_affordance_map()
steak = parse_query_obj('steak')
x, y, z = steak.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the steak.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the steak
steak = parse_query_obj('steak')
set_voxel_by_radius(gripper_map, steak.position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['grill', 'steak', 'chicken']
# Query: steak.
steak = detect('steak')
ret_val = steak






########################## Starting episode #########################
instruction: pick up the chicken and place it next to the grill
########################################
#### planner ####
########################################
objects = ['grill', 'steak', 'chicken']
# Query: pick up the chicken and place it next to the grill.
composer("grasp the chicken")
composer("back to default pose")
composer("move to 10cm to the right of the grill")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the chicken.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the chicken')
gripper_map = get_gripper_map('open everywhere except 1cm around the chicken')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['grill', 'steak', 'chicken']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the chicken.
affordance_map = get_empty_affordance_map()
chicken = parse_query_obj('chicken')
x, y, z = chicken.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the chicken.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the chicken
chicken = parse_query_obj('chicken')
set_voxel_by_radius(gripper_map, chicken.position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['grill', 'steak', 'chicken']
# Query: chicken.
chicken = detect('chicken')
ret_val = chicken


########################################
#### parse_query_obj ####
########################################
objects = ['grill', 'steak', 'chicken']
# Query: chicken.
chicken = detect('chicken')
ret_val = chicken


Reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: back to default pose.
reset_to_default_pose()


########################################
#### composer ####
########################################
# Query: move to 10cm to the right of the grill.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point 10cm to the right of the grill')
execute(movable, affordance_map=affordance_map)


########################################
#### parse_query_obj ####
########################################
objects = ['grill', 'steak', 'chicken']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point 10cm to the right of the grill.
affordance_map = get_empty_affordance_map()
grill = parse_query_obj('grill')
(min_x, min_y, min_z), (max_x, max_y, max_z) = grill.aabb
center_x, center_y, center_z = grill.position
# 10cm to the right of so we add to y-axis
x = max_x + cm2index(10, 'y')
y = center_y
z = center_z
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### parse_query_obj ####
########################################
objects = ['grill', 'steak', 'chicken']
# Query: grill.
grill = detect('grill')
ret_val = grill


Reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: open gripper.
movable = parse_query_obj('gripper')
gripper_map = get_gripper_map('open everywhere')
execute(movable, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['grill', 'steak', 'chicken']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
ret_val = gripper_map


Reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: back to default pose.
reset_to_default_pose()






########################## Starting episode #########################
instruction: take the chicken off the grill
########################################
#### planner ####
########################################
objects = ['grill', 'steak', 'chicken']
# Query: take the chicken off the grill.
composer("grasp the chicken")
composer("back to default pose")
composer("move to 10cm on top of the plate")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the chicken.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the chicken')
gripper_map = get_gripper_map('open everywhere except 1cm around the chicken')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['grill', 'steak', 'chicken']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the chicken.
affordance_map = get_empty_affordance_map()
chicken = parse_query_obj('chicken')
x, y, z = chicken.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the chicken.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the chicken
chicken = parse_query_obj('chicken')
set_voxel_by_radius(gripper_map, chicken.position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['grill', 'steak', 'chicken']
# Query: chicken.
chicken = detect('chicken')
ret_val = chicken


########################################
#### parse_query_obj ####
########################################
objects = ['grill', 'steak', 'chicken']
# Query: chicken.
chicken = detect('chicken')
ret_val = chicken


Reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: back to default pose.
reset_to_default_pose()


########################################
#### composer ####
########################################
# Query: move to 10cm on top of the plate.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point 10cm above the plate')
execute(movable, affordance_map=affordance_map)


########################################
#### parse_query_obj ####
########################################
objects = ['grill', 'steak', 'chicken']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point 10cm above the plate.
affordance_map = get_empty_affordance_map()
plate = parse_query_obj('plate')
(min_x, min_y, min_z), (max_x, max_y, max_z) = plate.aabb
center_x, center_y, center_z = plate.position
# 10cm above so we add to z-axis
x = center_x
y = center_y
z = max_z + cm2index(10, 'z')
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### parse_query_obj ####
########################################
objects = ['grill', 'steak', 'chicken']
# Query: plate.
plate = detect('plate')
ret_val = plate






########################## Starting episode #########################
instruction: take the chicken off the grill
########################################
#### planner ####
########################################
objects = ['grill', 'steak', 'chicken']
# Query: take the chicken off the grill.
composer("grasp the chicken")
composer("back to default pose")
composer("move to grill but avoid the grill")
composer("open gripper")
composer("back to default pose")
# done


########################################
#### composer ####
########################################
# Query: grasp the chicken.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the chicken')
gripper_map = get_gripper_map('open everywhere except 1cm around the chicken')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['grill', 'steak', 'chicken']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the chicken.
affordance_map = get_empty_affordance_map()
chicken = parse_query_obj('chicken')
x, y, z = chicken.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the chicken.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the chicken
chicken = parse_query_obj('chicken')
set_voxel_by_radius(gripper_map, chicken.position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['grill', 'steak', 'chicken']
# Query: chicken.
chicken = detect('chicken')
ret_val = chicken


########################################
#### parse_query_obj ####
########################################
objects = ['grill', 'steak', 'chicken']
# Query: chicken.
chicken = detect('chicken')
ret_val = chicken


Reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: back to default pose.
reset_to_default_pose()


########################################
#### composer ####
########################################
# Query: move to grill but avoid the grill.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point on the grill')
avoidance_map = get_avoidance_map('10cm from the grill')
execute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)


########################################
#### parse_query_obj ####
########################################
objects = ['grill', 'steak', 'chicken']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point on the grill.
affordance_map = get_empty_affordance_map()
grill = parse_query_obj('grill')
(min_x, min_y, min_z), (max_x, max_y, max_z) = grill.aabb
center_x, center_y, center_z = grill.position
# on the grill so z = max_z
x = center_x
y = center_y
z = max_z
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_avoidance_map ####
########################################
# Query: 10cm from the grill.
avoidance_map = get_empty_avoidance_map()
grill = parse_query_obj('grill')
set_voxel_by_radius(avoidance_map, grill.position, radius_cm=10, value=1)
ret_val = avoidance_map


########################################
#### parse_query_obj ####
########################################
objects = ['grill', 'steak', 'chicken']
# Query: grill.
grill = detect('grill')
ret_val = grill


########################################
#### parse_query_obj ####
########################################
objects = ['grill', 'steak', 'chicken']
# Query: grill.
grill = detect('grill')
ret_val = grill


Reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: open gripper.
movable = parse_query_obj('gripper')
gripper_map = get_gripper_map('open everywhere')
execute(movable, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['grill', 'steak', 'chicken']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
ret_val = gripper_map


Reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: back to default pose.
reset_to_default_pose()






########################## Starting episode #########################
instruction: take the chicken off the grill
########################################
#### planner ####
########################################
objects = ['grill', 'steak', 'chicken']
# Query: take the chicken off the grill.
composer("grasp the chicken")
composer("back to default pose")
composer("move to grill but avoid the grill")
composer("open gripper")
composer("back to default pose")
# done


########################################
#### composer ####
########################################
# Query: grasp the chicken.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the chicken')
gripper_map = get_gripper_map('open everywhere except 1cm around the chicken')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['grill', 'steak', 'chicken']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the chicken.
affordance_map = get_empty_affordance_map()
chicken = parse_query_obj('chicken')
x, y, z = chicken.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the chicken.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the chicken
chicken = parse_query_obj('chicken')
set_voxel_by_radius(gripper_map, chicken.position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['grill', 'steak', 'chicken']
# Query: chicken.
chicken = detect('chicken')
ret_val = chicken


########################################
#### parse_query_obj ####
########################################
objects = ['grill', 'steak', 'chicken']
# Query: chicken.
chicken = detect('chicken')
ret_val = chicken


Reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: back to default pose.
reset_to_default_pose()


########################################
#### composer ####
########################################
# Query: move to grill but avoid the grill.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point 10cm above the grill')
avoidance_map = get_avoidance_map('10cm from the grill')
execute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)


########################################
#### parse_query_obj ####
########################################
objects = ['grill', 'steak', 'chicken']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point 10cm above the grill.
affordance_map = get_empty_affordance_map()
grill = parse_query_obj('grill')
(min_x, min_y, min_z), (max_x, max_y, max_z) = grill.aabb
center_x, center_y, center_z = grill.position
# 10cm above so we add to z-axis
x = center_x
y = center_y
z = max_z + cm2index(10, 'z')
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_avoidance_map ####
########################################
# Query: 10cm from the grill.
avoidance_map = get_empty_avoidance_map()
grill = parse_query_obj('grill')
set_voxel_by_radius(avoidance_map, grill.position, radius_cm=10, value=1)
ret_val = avoidance_map


########################################
#### parse_query_obj ####
########################################
objects = ['grill', 'steak', 'chicken']
# Query: grill.
grill = detect('grill')
ret_val = grill


########################################
#### parse_query_obj ####
########################################
objects = ['grill', 'steak', 'chicken']
# Query: grill.
grill = detect('grill')
ret_val = grill


Reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: open gripper.
movable = parse_query_obj('gripper')
gripper_map = get_gripper_map('open everywhere')
execute(movable, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['grill', 'steak', 'chicken']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
ret_val = gripper_map


Reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: back to default pose.
reset_to_default_pose()






########################## Starting episode #########################
instruction: open wine bottle
########################################
#### planner ####
########################################
objects = ['bottle', 'cap']
# Query: open wine bottle.
composer("grab 2cm below the bottle cap.")
composer("turn clockwise by 180 degrees")
composer("back to default pose")
# done


########################################
#### composer ####
########################################
# Query: grab 2cm below the bottle cap..
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point 2cm below the bottle cap')
gripper_map = get_gripper_map('open everywhere except 1cm around the bottle cap')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['bottle', 'cap']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point 2cm below the bottle cap.
affordance_map = get_empty_affordance_map()
bottle_cap = parse_query_obj('bottle cap')
# negative normal because we are moving below the cap.
moving_dir = -bottle_cap.normal
affordance_xyz = bottle_cap.position + cm2index(2, moving_dir)
affordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the bottle cap.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the bottle cap
bottle_cap = parse_query_obj('bottle cap')
set_voxel_by_radius(gripper_map, bottle_cap.position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['bottle', 'cap']
# Query: bottle cap.
bottle = detect('bottle')
cap = detect('cap')
ret_val = cap


########################################
#### parse_query_obj ####
########################################
objects = ['bottle', 'cap']
# Query: bottle cap.
bottle = detect('bottle')
cap = detect('cap')
ret_val = cap


Reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: turn clockwise by 180 degrees.
movable = parse_query_obj('gripper')
rotation_map = get_rotation_map('turn clockwise by 180 degrees')
execute(movable, rotation_map=rotation_map)


########################################
#### parse_query_obj ####
########################################
objects = ['bottle', 'cap']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_rotation_map ####
########################################
# Query: turn clockwise by 180 degrees.
rotation_map = get_empty_rotation_map()
curr_rotation = rotation_map[0, 0, 0]
rotation_delta = euler2quat(0, 0, np.pi)
rotation_map[:, :, :] = qmult(curr_rotation, rotation_delta)
ret_val = rotation_map


Reward: 1.0
##############################


########################################
#### composer ####
########################################
# Query: back to default pose.
reset_to_default_pose()






########################## Starting episode #########################
instruction: screw open the wine bottle
########################################
#### planner ####
########################################
objects = ['bottle', 'cap']
# Query: screw open the wine bottle.
composer("grab 3cm below the bottle cap.")
composer("turn clockwise by 180 degrees")
composer("back to default pose")
# done


########################################
#### composer ####
########################################
# Query: grab 3cm below the bottle cap..
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point 3cm below the bottle cap')
execute(movable, affordance_map=affordance_map)


########################################
#### parse_query_obj ####
########################################
objects = ['bottle', 'cap']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point 3cm below the bottle cap.
affordance_map = get_empty_affordance_map()
bottle_cap = parse_query_obj('bottle cap')
# negative normal because we are moving below the cap.
moving_dir = -bottle_cap.normal
affordance_xyz = bottle_cap.position + cm2index(3, moving_dir)
affordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1
ret_val = affordance_map


########################################
#### parse_query_obj ####
########################################
objects = ['bottle', 'cap']
# Query: bottle cap.
bottle = detect('bottle')
cap = detect('cap')
ret_val = cap






########################## Starting episode #########################
instruction: screw open the wine bottle
########################################
#### planner ####
########################################
objects = ['bottle', 'cap']
# Query: screw open the wine bottle.
composer("grab 4cm below the bottle cap.")
composer("turn clockwise by 180 degrees")
composer("back to default pose")
# done


########################################
#### composer ####
########################################
# Query: grab 4cm below the bottle cap..
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point 4cm below the bottle cap')
execute(movable, affordance_map=affordance_map)


########################################
#### parse_query_obj ####
########################################
objects = ['bottle', 'cap']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point 4cm below the bottle cap.
affordance_map = get_empty_affordance_map()
bottle_cap = parse_query_obj('bottle cap')
(min_x, min_y, min_z), (max_x, max_y, max_z) = bottle_cap.aabb
center_x, center_y, center_z = bottle_cap.position
# 4cm below so we subtract from z-axis
x = center_x
y = center_y
z = min_z - cm2index(4, 'z')
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### parse_query_obj ####
########################################
objects = ['bottle', 'cap']
# Query: bottle cap.
bottle = detect('bottle')
cap = detect('cap')
ret_val = cap


Reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: turn clockwise by 180 degrees.
movable = parse_query_obj('gripper')
rotation_map = get_rotation_map('turn clockwise by 180 degrees')
execute(movable, rotation_map=rotation_map)


########################################
#### parse_query_obj ####
########################################
objects = ['bottle', 'cap']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_rotation_map ####
########################################
# Query: turn clockwise by 180 degrees.
rotation_map = get_empty_rotation_map()
curr_rotation = rotation_map[0, 0, 0]
rotation_delta = euler2quat(0, 0, np.pi)
rotation_map[:, :, :] = qmult(curr_rotation, rotation_delta)
ret_val = rotation_map


Reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: back to default pose.
reset_to_default_pose()






########################## Starting episode #########################
instruction: screw open the wine bottle
########################################
#### planner ####
########################################
objects = ['bottle', 'cap']
# Query: screw open the wine bottle.
composer("move 2cm below the bottle cap")
composer("close the gripper")
composer("turn clockwise by 180 degrees")
composer("back to default pose")
# done


########################################
#### composer ####
########################################
# Query: move 2cm below the bottle cap.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point 2cm below the bottle cap')
execute(movable, affordance_map=affordance_map)


########################################
#### parse_query_obj ####
########################################
objects = ['bottle', 'cap']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point 2cm below the bottle cap.
affordance_map = get_empty_affordance_map()
bottle_cap = parse_query_obj('bottle cap')
# negative normal because we are moving below the cap.
moving_dir = -bottle_cap.normal
affordance_xyz = bottle_cap.position + cm2index(2, moving_dir)
affordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1
ret_val = affordance_map


########################################
#### parse_query_obj ####
########################################
objects = ['bottle', 'cap']
# Query: bottle cap.
bottle = detect('bottle')
cap = detect('cap')
ret_val = cap


Reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: close the gripper.
movable = parse_query_obj('gripper')
gripper_map = get_gripper_map('close everywhere')
execute(movable, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['bottle', 'cap']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_gripper_map ####
########################################
# Query: close everywhere.
gripper_map = get_empty_gripper_map()
# close everywhere
gripper_map[:, :, :] = 0
ret_val = gripper_map


Reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: turn clockwise by 180 degrees.
movable = parse_query_obj('gripper')
rotation_map = get_rotation_map('turn clockwise by 180 degrees')
execute(movable, rotation_map=rotation_map)


########################################
#### parse_query_obj ####
########################################
objects = ['bottle', 'cap']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_rotation_map ####
########################################
# Query: turn clockwise by 180 degrees.
rotation_map = get_empty_rotation_map()
curr_rotation = rotation_map[0, 0, 0]
rotation_delta = euler2quat(0, 0, np.pi)
rotation_map[:, :, :] = qmult(curr_rotation, rotation_delta)
ret_val = rotation_map


Reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: back to default pose.
reset_to_default_pose()






########################## Starting episode #########################
instruction: screw open the wine bottle
########################################
#### planner ####
########################################
objects = ['bottle', 'cap']
# Query: screw open the wine bottle.
composer("move 2cm below the bottle cap")
composer("close the gripper")
composer("turn clockwise by 180 degrees")
composer("move ee up for 10cm")
# done


########################################
#### composer ####
########################################
# Query: move 2cm below the bottle cap.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point 2cm below the bottle cap')
execute(movable, affordance_map=affordance_map)


########################################
#### parse_query_obj ####
########################################
objects = ['bottle', 'cap']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point 2cm below the bottle cap.
affordance_map = get_empty_affordance_map()
bottle_cap = parse_query_obj('bottle cap')
# negative normal because we are moving below the cap.
moving_dir = -bottle_cap.normal
affordance_xyz = bottle_cap.position + cm2index(2, moving_dir)
affordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1
ret_val = affordance_map


########################################
#### parse_query_obj ####
########################################
objects = ['bottle', 'cap']
# Query: bottle cap.
bottle = detect('bottle')
cap = detect('cap')
ret_val = cap


Reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: close the gripper.
movable = parse_query_obj('gripper')
gripper_map = get_gripper_map('close everywhere')
execute(movable, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['bottle', 'cap']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_gripper_map ####
########################################
# Query: close everywhere.
gripper_map = get_empty_gripper_map()
# close everywhere
gripper_map[:, :, :] = 0
ret_val = gripper_map


Reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: turn clockwise by 180 degrees.
movable = parse_query_obj('gripper')
rotation_map = get_rotation_map('turn clockwise by 180 degrees')
execute(movable, rotation_map=rotation_map)


########################################
#### parse_query_obj ####
########################################
objects = ['bottle', 'cap']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_rotation_map ####
########################################
# Query: turn clockwise by 180 degrees.
rotation_map = get_empty_rotation_map()
curr_rotation = rotation_map[0, 0, 0]
rotation_delta = euler2quat(0, 0, np.pi)
rotation_map[:, :, :] = qmult(curr_rotation, rotation_delta)
ret_val = rotation_map


Reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: move ee up for 10cm.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map(f'a point 10cm above {movable.position}')
execute(movable, affordance_map)


########################################
#### parse_query_obj ####
########################################
objects = ['bottle', 'cap']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point 10cm above [56 25 27].
affordance_map = get_empty_affordance_map()
# 10cm above so we add to z-axis
x = 56
y = 25
z = 27 + cm2index(10, 'z')
affordance_map[x, y, z] = 1
ret_val = affordance_map


Reward: 0.0
##############################






########################## Starting episode #########################
instruction: open wine bottle
########################################
#### planner ####
########################################
objects = ['bottle', 'cap']
# Query: open wine bottle.
composer("move 2cm below the bottle cap")
composer("close the gripper")
composer("turn clockwise by 180 degrees")
composer("move ee up for 30cm")
# done


########################################
#### composer ####
########################################
# Query: move 2cm below the bottle cap.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point 2cm below the bottle cap')
execute(movable, affordance_map=affordance_map)


########################################
#### parse_query_obj ####
########################################
objects = ['bottle', 'cap']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point 2cm below the bottle cap.
affordance_map = get_empty_affordance_map()
bottle_cap = parse_query_obj('bottle cap')
# negative normal because we are moving below the cap.
moving_dir = -bottle_cap.normal
affordance_xyz = bottle_cap.position + cm2index(2, moving_dir)
affordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1
ret_val = affordance_map


########################################
#### parse_query_obj ####
########################################
objects = ['bottle', 'cap']
# Query: bottle cap.
bottle = detect('bottle')
cap = detect('cap')
ret_val = cap


Reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: close the gripper.
movable = parse_query_obj('gripper')
gripper_map = get_gripper_map('close everywhere')
execute(movable, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['bottle', 'cap']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_gripper_map ####
########################################
# Query: close everywhere.
gripper_map = get_empty_gripper_map()
# close everywhere
gripper_map[:, :, :] = 0
ret_val = gripper_map


Reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: turn clockwise by 180 degrees.
movable = parse_query_obj('gripper')
rotation_map = get_rotation_map('turn clockwise by 180 degrees')
execute(movable, rotation_map=rotation_map)


########################################
#### parse_query_obj ####
########################################
objects = ['bottle', 'cap']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_rotation_map ####
########################################
# Query: turn clockwise by 180 degrees.
rotation_map = get_empty_rotation_map()
curr_rotation = rotation_map[0, 0, 0]
rotation_delta = euler2quat(0, 0, np.pi)
rotation_map[:, :, :] = qmult(curr_rotation, rotation_delta)
ret_val = rotation_map


Reward: 1.0
##############################


########################################
#### composer ####
########################################
# Query: move ee up for 30cm.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map(f'a point 30cm above {movable.position}')
execute(movable, affordance_map)


########################################
#### parse_query_obj ####
########################################
objects = ['bottle', 'cap']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point 30cm above [69 60 26].
affordance_map = get_empty_affordance_map()
# 30cm above so we add to z-axis
x = 69
y = 60
z = 26 + cm2index(30, 'z')
affordance_map[x, y, z] = 1
ret_val = affordance_map


Reward: 1.0
##############################






########################## Starting episode #########################
instruction: open wine bottle
########################################
#### planner ####
########################################
objects = ['bottle', 'cap']
# Query: open wine bottle.
composer("move 2cm below the bottle cap")
composer("close the gripper")
composer("turn counter-clockwise by 180 degrees")
composer("move ee up for 30cm")
# done


########################################
#### composer ####
########################################
# Query: move 2cm below the bottle cap.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point 2cm below the bottle cap')
execute(movable, affordance_map=affordance_map)


########################################
#### parse_query_obj ####
########################################
objects = ['bottle', 'cap']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point 2cm below the bottle cap.
affordance_map = get_empty_affordance_map()
bottle_cap = parse_query_obj('bottle cap')
# negative normal because we are moving below the cap.
moving_dir = -bottle_cap.normal
affordance_xyz = bottle_cap.position + cm2index(2, moving_dir)
affordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1
ret_val = affordance_map


########################################
#### parse_query_obj ####
########################################
objects = ['bottle', 'cap']
# Query: bottle cap.
bottle = detect('bottle')
cap = detect('cap')
ret_val = cap


Reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: close the gripper.
movable = parse_query_obj('gripper')
gripper_map = get_gripper_map('close everywhere')
execute(movable, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['bottle', 'cap']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_gripper_map ####
########################################
# Query: close everywhere.
gripper_map = get_empty_gripper_map()
# close everywhere
gripper_map[:, :, :] = 0
ret_val = gripper_map


Reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: turn counter-clockwise by 180 degrees.
movable = parse_query_obj('gripper')
rotation_map = get_rotation_map('turn counter-clockwise by 180 degrees')
execute(movable, rotation_map=rotation_map)


########################################
#### parse_query_obj ####
########################################
objects = ['bottle', 'cap']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_rotation_map ####
########################################
# Query: turn counter-clockwise by 180 degrees.
rotation_map = get_empty_rotation_map()
curr_rotation = rotation_map[0, 0, 0]
rotation_delta = euler2quat(0, 0, -np.pi)
rotation_map[:, :, :] = qmult(curr_rotation, rotation_delta)
ret_val = rotation_map


Reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: move ee up for 30cm.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map(f'a point 30cm above {movable.position}')
execute(movable, affordance_map)


########################################
#### parse_query_obj ####
########################################
objects = ['bottle', 'cap']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point 30cm above [41 60 29].
affordance_map = get_empty_affordance_map()
# 30cm above so we add to z-axis
x = 41
y = 60
z = 29 + cm2index(30, 'z')
affordance_map[x, y, z] = 1
ret_val = affordance_map


Reward: 1.0
##############################






########################## Starting episode #########################
instruction: move hanger onto the other rackmove the hanger from one rack to the other
########################################
#### planner ####
########################################
objects = ['target rack', 'source rack', 'hanger']
# Query: move hanger onto the other rackmove the hanger from one rack to the other.
composer("Grab within 3 cm of the hanger")
# composer("move ee up for 30cm")
# done


########################################
#### composer ####
########################################
# Query: Grab within 3 cm of the hanger.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point within 3cm of the hanger')
gripper_map = get_gripper_map('open everywhere except 1cm around the hanger')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['target rack', 'source rack', 'hanger']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point within 3cm of the hanger.
affordance_map = get_empty_affordance_map()
hanger = parse_query_obj('hanger')
set_voxel_by_radius(affordance_map, hanger.position, radius_cm=3, value=1)
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the hanger.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the hanger
hanger = parse_query_obj('hanger')
set_voxel_by_radius(gripper_map, hanger.position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['target rack', 'source rack', 'hanger']
# Query: hanger.
hanger = detect('hanger')
ret_val = hanger


########################################
#### parse_query_obj ####
########################################
objects = ['target rack', 'source rack', 'hanger']
# Query: hanger.
hanger = detect('hanger')
ret_val = hanger


Reward: 0.0
##############################






########################## Starting episode #########################
instruction: put the hanger on the other rack
########################################
#### planner ####
########################################
objects = ['target rack', 'source rack', 'hanger']
# Query: put the hanger on the other rack.
composer("Grab within 3cm of the hanger but avoid rack")
composer("move ee up for 2cm")
# done


########################################
#### composer ####
########################################
# Query: Grab within 3cm of the hanger but avoid rack.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point within 3cm of the hanger')
avoidance_map = get_avoidance_map('10cm from the rack')
gripper_map = get_gripper_map('open everywhere except 1cm around the hanger')
execute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['target rack', 'source rack', 'hanger']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point within 3cm of the hanger.
affordance_map = get_empty_affordance_map()
hanger = parse_query_obj('hanger')
set_voxel_by_radius(affordance_map, hanger.position, radius_cm=3, value=1)
ret_val = affordance_map


########################################
#### get_avoidance_map ####
########################################
# Query: 10cm from the rack.
avoidance_map = get_empty_avoidance_map()
rack = parse_query_obj('rack')
set_voxel_by_radius(avoidance_map, rack.position, radius_cm=10, value=1)
ret_val = avoidance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the hanger.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the hanger
hanger = parse_query_obj('hanger')
set_voxel_by_radius(gripper_map, hanger.position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['target rack', 'source rack', 'hanger']
# Query: hanger.
hanger = detect('hanger')
ret_val = hanger


########################################
#### parse_query_obj ####
########################################
objects = ['target rack', 'source rack', 'hanger']
# Query: rack.
target_rack = detect('target rack')
source_rack = detect('source rack')
if target_rack.position[2] > source_rack.position[2]:
    rack = target_rack
else:
    rack = source_rack
ret_val = rack


########################################
#### parse_query_obj ####
########################################
objects = ['target rack', 'source rack', 'hanger']
# Query: hanger.
hanger = detect('hanger')
ret_val = hanger


Reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: move ee up for 2cm.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map(f'a point 2cm above {movable.position}')
execute(movable, affordance_map)


########################################
#### parse_query_obj ####
########################################
objects = ['target rack', 'source rack', 'hanger']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point 2cm above [74 23 12].
affordance_map = get_empty_affordance_map()
# 2cm above so we add to z-axis
x = 74
y = 23
z = 12 + cm2index(2, 'z')
affordance_map[x, y, z] = 1
ret_val = affordance_map


Reward: 0.0
##############################






########################## Starting episode #########################
instruction: move hanger onto the other rackmove the hanger from one rack to the other
########################################
#### planner ####
########################################
objects = ['target rack', 'source rack', 'hanger']
# Query: move hanger onto the other rackmove the hanger from one rack to the other.
composer("Grab within 3cm of the hanger but avoid rack")
composer("back to default pose")
# done


########################################
#### composer ####
########################################
# Query: Grab within 3cm of the hanger but avoid rack.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point within 3cm of the hanger')
avoidance_map = get_avoidance_map('10cm from the rack')
gripper_map = get_gripper_map('open everywhere except 1cm around the hanger')
execute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['target rack', 'source rack', 'hanger']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point within 3cm of the hanger.
affordance_map = get_empty_affordance_map()
hanger = parse_query_obj('hanger')
set_voxel_by_radius(affordance_map, hanger.position, radius_cm=3, value=1)
ret_val = affordance_map


########################################
#### get_avoidance_map ####
########################################
# Query: 10cm from the rack.
avoidance_map = get_empty_avoidance_map()
rack = parse_query_obj('rack')
set_voxel_by_radius(avoidance_map, rack.position, radius_cm=10, value=1)
ret_val = avoidance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the hanger.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the hanger
hanger = parse_query_obj('hanger')
set_voxel_by_radius(gripper_map, hanger.position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['target rack', 'source rack', 'hanger']
# Query: hanger.
hanger = detect('hanger')
ret_val = hanger


########################################
#### parse_query_obj ####
########################################
objects = ['target rack', 'source rack', 'hanger']
# Query: rack.
target_rack = detect('target rack')
source_rack = detect('source rack')
if target_rack.position[2] > source_rack.position[2]:
    rack = target_rack
else:
    rack = source_rack
ret_val = rack


########################################
#### parse_query_obj ####
########################################
objects = ['target rack', 'source rack', 'hanger']
# Query: hanger.
hanger = detect('hanger')
ret_val = hanger


Reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: back to default pose.
reset_to_default_pose()






########################## Starting episode #########################
instruction: pick up the hanger and place it on the other rack
########################################
#### planner ####
########################################
objects = ['target rack', 'source rack', 'hanger']
# Query: pick up the hanger and place it on the other rack.
composer("Grab the hanger but avoid rack")
composer("back to default pose")
# done


########################################
#### composer ####
########################################
# Query: Grab the hanger but avoid rack.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the hanger')
avoidance_map = get_avoidance_map('10cm from the rack')
gripper_map = get_gripper_map('open everywhere except 1cm around the hanger')
execute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['target rack', 'source rack', 'hanger']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the hanger.
affordance_map = get_empty_affordance_map()
hanger = parse_query_obj('hanger')
x, y, z = hanger.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_avoidance_map ####
########################################
# Query: 10cm from the rack.
avoidance_map = get_empty_avoidance_map()
rack = parse_query_obj('rack')
set_voxel_by_radius(avoidance_map, rack.position, radius_cm=10, value=1)
ret_val = avoidance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the hanger.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the hanger
hanger = parse_query_obj('hanger')
set_voxel_by_radius(gripper_map, hanger.position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['target rack', 'source rack', 'hanger']
# Query: hanger.
hanger = detect('hanger')
ret_val = hanger


########################################
#### parse_query_obj ####
########################################
objects = ['target rack', 'source rack', 'hanger']
# Query: rack.
target_rack = detect('target rack')
source_rack = detect('source rack')
if target_rack.position[2] > source_rack.position[2]:
    rack = target_rack
else:
    rack = source_rack
ret_val = rack


########################################
#### parse_query_obj ####
########################################
objects = ['target rack', 'source rack', 'hanger']
# Query: hanger.
hanger = detect('hanger')
ret_val = hanger


Reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: back to default pose.
reset_to_default_pose()






########################## Starting episode #########################
instruction: plug the charger into the mains
########################################
#### planner ####
########################################
objects = ['charger', 'plug']
# Query: plug the charger into the mains.
composer("grab the charger")
composer("move in front of plug")
composer("rotate the charger 90 degree")
composer("move forward 5cm towards the plug")
# done


########################################
#### composer ####
########################################
# Query: grab the charger.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the charger')
gripper_map = get_gripper_map('open everywhere except 1cm around the charger')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['charger', 'plug']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the charger.
affordance_map = get_empty_affordance_map()
charger = parse_query_obj('charger')
x, y, z = charger.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the charger.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the charger
charger = parse_query_obj('charger')
set_voxel_by_radius(gripper_map, charger.position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['charger', 'plug']
# Query: charger.
charger = detect('charger')
ret_val = charger


########################################
#### parse_query_obj ####
########################################
objects = ['charger', 'plug']
# Query: charger.
charger = detect('charger')
ret_val = charger


Reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: move in front of plug.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point 10cm in front of the plug')
execute(movable, affordance_map)


########################################
#### parse_query_obj ####
########################################
objects = ['charger', 'plug']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point 10cm in front of the plug.
affordance_map = get_empty_affordance_map()
plug = parse_query_obj('plug')
(min_x, min_y, min_z), (max_x, max_y, max_z) = plug.aabb
center_x, center_y, center_z = plug.position
# 10cm in front of so we add to x-axis
x = max_x + cm2index(10, 'x')
y = center_y
z = center_z
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### parse_query_obj ####
########################################
objects = ['charger', 'plug']
# Query: plug.
plug = detect('plug')
ret_val = plug


Reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: rotate the charger 90 degree.
movable = parse_query_obj('charger')
rotation_map = get_rotation_map('rotate 90 degrees')
execute(movable, rotation_map=rotation_map)


########################################
#### parse_query_obj ####
########################################
objects = ['charger', 'plug']
# Query: charger.
charger = detect('charger')
ret_val = charger


########################################
#### get_rotation_map ####
########################################
# Query: rotate 90 degrees.
rotation_map = get_empty_rotation_map()
curr_rotation = rotation_map[0, 0, 0]
# rotate 90 degrees around the z-axis
rotation_delta = euler2quat(0, 0, np.pi / 2)
rotation_map[:, :, :] = qmult(curr_rotation, rotation_delta)
ret_val = rotation_map


########################################
#### composer ####
########################################
# Query: move forward 5cm towards the plug.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point 5cm in front of the plug')
execute(movable, affordance_map)


########################################
#### parse_query_obj ####
########################################
objects = ['charger', 'plug']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point 5cm in front of the plug.
affordance_map = get_empty_affordance_map()
plug = parse_query_obj('plug')
# 5cm in front of so we add to x-axis
x = plug.position[0] + cm2index(5, 'x')
y = plug.position[1]
z = plug.position[2]
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### parse_query_obj ####
########################################
objects = ['charger', 'plug']
# Query: plug.
plug = detect('plug')
ret_val = plug


Reward: 0.0
##############################






########################## Starting episode #########################
instruction: plug the charger into the mains
########################################
#### planner ####
########################################
objects = ['charger', 'plug']
# Query: plug the charger into the mains.
composer("grab the charger")
composer("move back to plug")
composer("turn the charger clockwise by 180 degree")
composer("rotate the charger 90 degree")
composer("move forward 5cm towards the plug")
# done


########################################
#### composer ####
########################################
# Query: grab the charger.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the charger')
gripper_map = get_gripper_map('open everywhere except 1cm around the charger')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['charger', 'plug']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the charger.
affordance_map = get_empty_affordance_map()
charger = parse_query_obj('charger')
x, y, z = charger.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the charger.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the charger
charger = parse_query_obj('charger')
set_voxel_by_radius(gripper_map, charger.position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['charger', 'plug']
# Query: charger.
charger = detect('charger')
ret_val = charger


########################################
#### parse_query_obj ####
########################################
objects = ['charger', 'plug']
# Query: charger.
charger = detect('charger')
ret_val = charger


Reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: move back to plug.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point 10cm behind the plug')
execute(movable, affordance_map=affordance_map)


########################################
#### parse_query_obj ####
########################################
objects = ['charger', 'plug']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point 10cm behind the plug.
affordance_map = get_empty_affordance_map()
plug = parse_query_obj('plug')
# negative normal because we are moving behind the plug.
moving_dir = -plug.normal
affordance_xyz = plug.position + cm2index(10, moving_dir)
affordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1
ret_val = affordance_map


########################################
#### parse_query_obj ####
########################################
objects = ['charger', 'plug']
# Query: plug.
plug = detect('plug')
ret_val = plug


Reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: turn the charger clockwise by 180 degree.
movable = parse_query_obj('charger')
rotation_map = get_rotation_map('turn clockwise by 180 degrees')
execute(movable, rotation_map=rotation_map)


########################################
#### parse_query_obj ####
########################################
objects = ['charger', 'plug']
# Query: charger.
charger = detect('charger')
ret_val = charger


########################################
#### get_rotation_map ####
########################################
# Query: turn clockwise by 180 degrees.
rotation_map = get_empty_rotation_map()
curr_rotation = rotation_map[0, 0, 0]
rotation_delta = euler2quat(0, 0, np.pi)
rotation_map[:, :, :] = qmult(curr_rotation, rotation_delta)
ret_val = rotation_map


########################################
#### composer ####
########################################
# Query: rotate the charger 90 degree.
movable = parse_query_obj('charger')
rotation_map = get_rotation_map('rotate 90 degrees')
execute(movable, rotation_map=rotation_map)


########################################
#### parse_query_obj ####
########################################
objects = ['charger', 'plug']
# Query: charger.
charger = detect('charger')
ret_val = charger


########################################
#### get_rotation_map ####
########################################
# Query: rotate 90 degrees.
rotation_map = get_empty_rotation_map()
curr_rotation = rotation_map[0, 0, 0]
# rotate 90 degrees around the z-axis
rotation_delta = euler2quat(0, 0, np.pi / 2)
rotation_map[:, :, :] = qmult(curr_rotation, rotation_delta)
ret_val = rotation_map


########################################
#### composer ####
########################################
# Query: move forward 5cm towards the plug.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point 5cm in front of the plug')
execute(movable, affordance_map)


########################################
#### parse_query_obj ####
########################################
objects = ['charger', 'plug']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point 5cm in front of the plug.
affordance_map = get_empty_affordance_map()
plug = parse_query_obj('plug')
# 5cm in front of so we add to x-axis
x = plug.position[0] + cm2index(5, 'x')
y = plug.position[1]
z = plug.position[2]
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### parse_query_obj ####
########################################
objects = ['charger', 'plug']
# Query: plug.
plug = detect('plug')
ret_val = plug


Reward: 0.0
##############################






########################## Starting episode #########################
instruction: plug the charger into the mains
########################################
#### planner ####
########################################
objects = ['charger', 'plug']
# Query: plug the charger into the mains.
composer("grab the charger")
composer("move 10cm behind the plug")
composer("face the plug)
composer("rotate the charger 90 degree")
composer("move forward 5cm towards the plug")
# done






########################## Starting episode #########################
instruction: pick up the charger and plug in it
########################################
#### planner ####
########################################
objects = ['charger', 'plug']
# Query: pick up the charger and plug in it.
composer("grab the charger")
composer("move 10cm behind the plug")
composer("face the plug)
composer("rotate the charger 90 degree")
composer("move forward 5cm towards the plug")
# done






########################## Starting episode #########################
instruction: pick up the charger and plug in it
########################################
#### planner ####
########################################
objects = ['charger', 'plug']
# Query: pick up the charger and plug in it.
composer("grab the charger")
composer("move 10cm behind the plug")
composer("face the plug")
composer("rotate the charger 90 degree")
composer("move forward 5cm towards the plug")
# done


########################################
#### composer ####
########################################
# Query: grab the charger.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the charger')
gripper_map = get_gripper_map('open everywhere except 1cm around the charger')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['charger', 'plug']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the charger.
affordance_map = get_empty_affordance_map()
charger = parse_query_obj('charger')
x, y, z = charger.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the charger.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the charger
charger = parse_query_obj('charger')
set_voxel_by_radius(gripper_map, charger.position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['charger', 'plug']
# Query: charger.
charger = detect('charger')
ret_val = charger


########################################
#### parse_query_obj ####
########################################
objects = ['charger', 'plug']
# Query: charger.
charger = detect('charger')
ret_val = charger


Reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: move 10cm behind the plug.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point 10cm behind the plug')
execute(movable, affordance_map=affordance_map)


########################################
#### parse_query_obj ####
########################################
objects = ['charger', 'plug']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point 10cm behind the plug.
affordance_map = get_empty_affordance_map()
plug = parse_query_obj('plug')
# negative normal because we are moving behind the plug.
moving_dir = -plug.normal
affordance_xyz = plug.position + cm2index(10, moving_dir)
affordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1
ret_val = affordance_map


########################################
#### parse_query_obj ####
########################################
objects = ['charger', 'plug']
# Query: plug.
plug = detect('plug')
ret_val = plug


Reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: face the plug.
movable = parse_query_obj('gripper')
rotation_map = get_rotation_map('face the plug')
execute(movable, rotation_map=rotation_map)


########################################
#### parse_query_obj ####
########################################
objects = ['charger', 'plug']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_rotation_map ####
########################################
# Query: face the plug.
rotation_map = get_empty_rotation_map()
plug = parse_query_obj('plug')
target_rotation = vec2quat(-plug.normal)
rotation_map[:, :, :] = target_rotation
ret_val = rotation_map


########################################
#### parse_query_obj ####
########################################
objects = ['charger', 'plug']
# Query: plug.
plug = detect('plug')
ret_val = plug


Reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: rotate the charger 90 degree.
movable = parse_query_obj('charger')
rotation_map = get_rotation_map('rotate 90 degrees')
execute(movable, rotation_map=rotation_map)


########################################
#### parse_query_obj ####
########################################
objects = ['charger', 'plug']
# Query: charger.
charger = detect('charger')
ret_val = charger


########################################
#### get_rotation_map ####
########################################
# Query: rotate 90 degrees.
rotation_map = get_empty_rotation_map()
curr_rotation = rotation_map[0, 0, 0]
# rotate 90 degrees around the z-axis
rotation_delta = euler2quat(0, 0, np.pi / 2)
rotation_map[:, :, :] = qmult(curr_rotation, rotation_delta)
ret_val = rotation_map


########################################
#### composer ####
########################################
# Query: move forward 5cm towards the plug.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point 5cm in front of the plug')
execute(movable, affordance_map)


########################################
#### parse_query_obj ####
########################################
objects = ['charger', 'plug']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point 5cm in front of the plug.
affordance_map = get_empty_affordance_map()
plug = parse_query_obj('plug')
# 5cm in front of so we add to x-axis
x = plug.position[0] + cm2index(5, 'x')
y = plug.position[1]
z = plug.position[2]
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### parse_query_obj ####
########################################
objects = ['charger', 'plug']
# Query: plug.
plug = detect('plug')
ret_val = plug


Reward: 0.0
##############################






########################## Starting episode #########################
instruction: plug the charger into the mains
########################################
#### planner ####
########################################
objects = ['charger', 'plug']
# Query: plug the charger into the mains.
composer("grab the charger")
composer("move 10cm in front of the plug")
composer("face the plug")
composer("rotate the charger 90 degree")
composer("move forward 5cm towards the plug")
# done


########################################
#### composer ####
########################################
# Query: grab the charger.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the charger')
gripper_map = get_gripper_map('open everywhere except 1cm around the charger')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['charger', 'plug']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the charger.
affordance_map = get_empty_affordance_map()
charger = parse_query_obj('charger')
x, y, z = charger.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the charger.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the charger
charger = parse_query_obj('charger')
set_voxel_by_radius(gripper_map, charger.position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['charger', 'plug']
# Query: charger.
charger = detect('charger')
ret_val = charger


########################################
#### parse_query_obj ####
########################################
objects = ['charger', 'plug']
# Query: charger.
charger = detect('charger')
ret_val = charger


Reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: move 10cm in front of the plug.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map(f'a point 10cm in front of the plug')
execute(movable, affordance_map)


########################################
#### parse_query_obj ####
########################################
objects = ['charger', 'plug']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point 10cm in front of the plug.
affordance_map = get_empty_affordance_map()
plug = parse_query_obj('plug')
(min_x, min_y, min_z), (max_x, max_y, max_z) = plug.aabb
center_x, center_y, center_z = plug.position
# 10cm in front of so we add to x-axis
x = max_x + cm2index(10, 'x')
y = center_y
z = center_z
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### parse_query_obj ####
########################################
objects = ['charger', 'plug']
# Query: plug.
plug = detect('plug')
ret_val = plug


Reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: face the plug.
movable = parse_query_obj('gripper')
rotation_map = get_rotation_map('face the plug')
execute(movable, rotation_map=rotation_map)


########################################
#### parse_query_obj ####
########################################
objects = ['charger', 'plug']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_rotation_map ####
########################################
# Query: face the plug.
rotation_map = get_empty_rotation_map()
plug = parse_query_obj('plug')
target_rotation = vec2quat(-plug.normal)
rotation_map[:, :, :] = target_rotation
ret_val = rotation_map


########################################
#### parse_query_obj ####
########################################
objects = ['charger', 'plug']
# Query: plug.
plug = detect('plug')
ret_val = plug


Reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: rotate the charger 90 degree.
movable = parse_query_obj('charger')
rotation_map = get_rotation_map('rotate 90 degrees')
execute(movable, rotation_map=rotation_map)


########################################
#### parse_query_obj ####
########################################
objects = ['charger', 'plug']
# Query: charger.
charger = detect('charger')
ret_val = charger


########################################
#### get_rotation_map ####
########################################
# Query: rotate 90 degrees.
rotation_map = get_empty_rotation_map()
curr_rotation = rotation_map[0, 0, 0]
# rotate 90 degrees around the z-axis
rotation_delta = euler2quat(0, 0, np.pi / 2)
rotation_map[:, :, :] = qmult(curr_rotation, rotation_delta)
ret_val = rotation_map


########################################
#### composer ####
########################################
# Query: move forward 5cm towards the plug.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point 5cm in front of the plug')
execute(movable, affordance_map)


########################################
#### parse_query_obj ####
########################################
objects = ['charger', 'plug']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point 5cm in front of the plug.
affordance_map = get_empty_affordance_map()
plug = parse_query_obj('plug')
# 5cm in front of so we add to x-axis
x = plug.position[0] + cm2index(5, 'x')
y = plug.position[1]
z = plug.position[2]
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### parse_query_obj ####
########################################
objects = ['charger', 'plug']
# Query: plug.
plug = detect('plug')
ret_val = plug


Reward: 0.0
##############################






########################## Starting episode #########################
instruction: pick up the knife and leave it on the chopping board
########################################
#### planner ####
########################################
objects = ['chopping board', 'knife', 'knife block']
# Query: pick up the knife and leave it on the chopping board.
composer("grab the knife")
composer("move ee up for 30cm")
composer("move to chopping board")
composer("open the gripper")
# done


########################################
#### composer ####
########################################
# Query: grab the knife.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the knife')
gripper_map = get_gripper_map('open everywhere except 1cm around the knife')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['chopping board', 'knife', 'knife block']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the knife.
affordance_map = get_empty_affordance_map()
knife = parse_query_obj('knife')
x, y, z = knife.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the knife.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the knife
knife = parse_query_obj('knife')
set_voxel_by_radius(gripper_map, knife.position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['chopping board', 'knife', 'knife block']
# Query: knife.
knife = detect('knife')
ret_val = knife


########################################
#### parse_query_obj ####
########################################
objects = ['chopping board', 'knife', 'knife block']
# Query: knife.
knife = detect('knife')
ret_val = knife


Reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: move ee up for 30cm.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map(f'a point 30cm above {movable.position}')
execute(movable, affordance_map)


########################################
#### parse_query_obj ####
########################################
objects = ['chopping board', 'knife', 'knife block']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point 30cm above [51 33 19].
affordance_map = get_empty_affordance_map()
# 30cm above so we add to z-axis
x = 51
y = 33
z = 19 + cm2index(30, 'z')
affordance_map[x, y, z] = 1
ret_val = affordance_map


Reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: move to chopping board.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point on the chopping board')
execute(movable, affordance_map=affordance_map)


########################################
#### parse_query_obj ####
########################################
objects = ['chopping board', 'knife', 'knife block']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point on the chopping board.
affordance_map = get_empty_affordance_map()
chopping_board = parse_query_obj('chopping board')
(min_x, min_y, min_z), (max_x, max_y, max_z) = chopping_board.aabb
center_x, center_y, center_z = chopping_board.position
# on the chopping board so z = min_z
x = center_x
y = center_y
z = min_z
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### parse_query_obj ####
########################################
objects = ['chopping board', 'knife', 'knife block']
# Query: chopping board.
chopping_board = detect('chopping board')
ret_val = chopping_board


Reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: open the gripper.
movable = parse_query_obj('gripper')
gripper_map = get_gripper_map('open everywhere')
execute(movable, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['chopping board', 'knife', 'knife block']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
ret_val = gripper_map


Reward: 1.0
##############################






########################## Starting episode #########################
instruction: push the block until it is sitting on top of the target




########################## Starting episode #########################
instruction: slide the block onto the target
########################################
#### planner ####
########################################
objects = ['block', 'target']
# Query: slide the block onto the target.
composer("push the block towards the target")


########################################
#### composer ####
########################################
# Query: push the block towards the target.
movable = parse_query_obj('block')
affordance_map = get_affordance_map('a point 10cm in front of the block')
execute(movable, affordance_map=affordance_map)


########################################
#### parse_query_obj ####
########################################
objects = ['block', 'target']
# Query: block.
block = detect('block')
ret_val = block


########################################
#### get_affordance_map ####
########################################
# Query: a point 10cm in front of the block.
affordance_map = get_empty_affordance_map()
block = parse_query_obj('block')
(min_x, min_y, min_z), (max_x, max_y, max_z) = block.aabb
center_x, center_y, center_z = block.position
# 10cm in front of so we add to x-axis
x = max_x + cm2index(10, 'x')
y = center_y
z = center_z
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### parse_query_obj ####
########################################
objects = ['block', 'target']
# Query: block.
block = detect('block')
ret_val = block






########################## Starting episode #########################
instruction: cover the target with the block by pushing the block in its direction
########################################
#### planner ####
########################################
objects = ['block', 'target']
# Query: cover the target with the block by pushing the block in its direction.
composer("move ee to the opposite side of the target near the block")
composer("close the gripper")
composer("move to target")
# done


########################################
#### composer ####
########################################
# Query: move ee to the opposite side of the target near the block.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point on the opposite side of the target near the block')
execute(movable, affordance_map=affordance_map)


########################################
#### parse_query_obj ####
########################################
objects = ['block', 'target']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point on the opposite side of the target near the block.
affordance_map = get_empty_affordance_map()
target = parse_query_obj('target')
block = parse_query_obj('block')
# get the normal of the target
normal = target.normal
# get the position of the target
target_position = target.position
# get the position of the block
block_position = block.position
# get the direction from the target to the block
direction = block_position - target_position
# get the opposite direction of the normal
opposite_normal = -normal
# get the position of the affordance point
affordance_position = target_position + cm2index(10, opposite_normal) + cm2index(10, direction)
# set the affordance point in the affordance map
affordance_map[affordance_position[0], affordance_position[1], affordance_position[2]] = 1
ret_val = affordance_map


########################################
#### parse_query_obj ####
########################################
objects = ['block', 'target']
# Query: target.
target = detect('target')
ret_val = target


########################################
#### parse_query_obj ####
########################################
objects = ['block', 'target']
# Query: block.
block = detect('block')
ret_val = block


Reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: close the gripper.
movable = parse_query_obj('gripper')
gripper_map = get_gripper_map('close everywhere')
execute(movable, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['block', 'target']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_gripper_map ####
########################################
# Query: close everywhere.
gripper_map = get_empty_gripper_map()
# close everywhere
gripper_map[:, :, :] = 0
ret_val = gripper_map


Reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: move to target.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point 10cm in front of the gripper')
execute(movable, affordance_map)


########################################
#### parse_query_obj ####
########################################
objects = ['block', 'target']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point 10cm in front of the gripper.
affordance_map = get_empty_affordance_map()
gripper = parse_query_obj('gripper')
# 10cm in front of so we add to x-axis
x = gripper.position[0] + cm2index(10, 'x')
y = gripper.position[1]
z = gripper.position[2]
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### parse_query_obj ####
########################################
objects = ['block', 'target']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


Reward: 0.0
##############################






########################## Starting episode #########################
instruction: slide the block to target
########################################
#### planner ####
########################################
objects = ['block', 'target']
# Query: slide the block to target.
composer("move ee to the right of block") 
composer("close the gripper")
composer("move to target")
# done


########################################
#### composer ####
########################################
# Query: move ee to the right of block.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point 10cm to the right of the block')
execute(movable, affordance_map=affordance_map)


########################################
#### parse_query_obj ####
########################################
objects = ['block', 'target']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point 10cm to the right of the block.
affordance_map = get_empty_affordance_map()
block = parse_query_obj('block')
(min_x, min_y, min_z), (max_x, max_y, max_z) = block.aabb
center_x, center_y, center_z = block.position
# 10cm to the right of so we add to y-axis
x = max_x + cm2index(10, 'y')
y = center_y
z = center_z
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### parse_query_obj ####
########################################
objects = ['block', 'target']
# Query: block.
block = detect('block')
ret_val = block


Reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: close the gripper.
movable = parse_query_obj('gripper')
gripper_map = get_gripper_map('close everywhere')
execute(movable, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['block', 'target']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_gripper_map ####
########################################
# Query: close everywhere.
gripper_map = get_empty_gripper_map()
# close everywhere
gripper_map[:, :, :] = 0
ret_val = gripper_map


Reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: move to target.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point 10cm in front of the gripper')
execute(movable, affordance_map)


########################################
#### parse_query_obj ####
########################################
objects = ['block', 'target']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point 10cm in front of the gripper.
affordance_map = get_empty_affordance_map()
gripper = parse_query_obj('gripper')
# 10cm in front of so we add to x-axis
x = gripper.position[0] + cm2index(10, 'x')
y = gripper.position[1]
z = gripper.position[2]
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### parse_query_obj ####
########################################
objects = ['block', 'target']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


Reward: 0.0
##############################






########################## Starting episode #########################
instruction: push the block until it is sitting on top of the target
########################################
#### planner ####
########################################
objects = ['block', 'target']
# Query: push the block until it is sitting on top of the target.
composer("move ee to the right of block") 
composer("close the gripper")
composer("move to target")
# done


########################################
#### composer ####
########################################
# Query: move ee to the right of block.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point 10cm to the right of the block')
execute(movable, affordance_map=affordance_map)


########################################
#### parse_query_obj ####
########################################
objects = ['block', 'target']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point 10cm to the right of the block.
affordance_map = get_empty_affordance_map()
block = parse_query_obj('block')
(min_x, min_y, min_z), (max_x, max_y, max_z) = block.aabb
center_x, center_y, center_z = block.position
# 10cm to the right of so we add to y-axis
x = max_x + cm2index(10, 'y')
y = center_y
z = center_z
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### parse_query_obj ####
########################################
objects = ['block', 'target']
# Query: block.
block = detect('block')
ret_val = block


Reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: close the gripper.
movable = parse_query_obj('gripper')
gripper_map = get_gripper_map('close everywhere')
execute(movable, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['block', 'target']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_gripper_map ####
########################################
# Query: close everywhere.
gripper_map = get_empty_gripper_map()
# close everywhere
gripper_map[:, :, :] = 0
ret_val = gripper_map


Reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: move to target.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point 10cm in front of the gripper')
execute(movable, affordance_map)


########################################
#### parse_query_obj ####
########################################
objects = ['block', 'target']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point 10cm in front of the gripper.
affordance_map = get_empty_affordance_map()
gripper = parse_query_obj('gripper')
# 10cm in front of so we add to x-axis
x = gripper.position[0] + cm2index(10, 'x')
y = gripper.position[1]
z = gripper.position[2]
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### parse_query_obj ####
########################################
objects = ['block', 'target']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


Reward: 0.0
##############################






########################## Starting episode #########################
instruction: slide the block towards the green target
########################################
#### planner ####
########################################
objects = ['block', 'target']
# Query: slide the block towards the green target.
composer("move ee to the right of block") 
composer("close the gripper")
composer("move to center of target")
# done


########################################
#### composer ####
########################################
# Query: move ee to the right of block.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point 10cm to the right of the block')
execute(movable, affordance_map=affordance_map)


########################################
#### parse_query_obj ####
########################################
objects = ['block', 'target']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point 10cm to the right of the block.
affordance_map = get_empty_affordance_map()
block = parse_query_obj('block')
(min_x, min_y, min_z), (max_x, max_y, max_z) = block.aabb
center_x, center_y, center_z = block.position
# 10cm to the right of so we add to y-axis
x = max_x + cm2index(10, 'y')
y = center_y
z = center_z
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### parse_query_obj ####
########################################
objects = ['block', 'target']
# Query: block.
block = detect('block')
ret_val = block


Reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: close the gripper.
movable = parse_query_obj('gripper')
gripper_map = get_gripper_map('close everywhere')
execute(movable, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['block', 'target']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_gripper_map ####
########################################
# Query: close everywhere.
gripper_map = get_empty_gripper_map()
# close everywhere
gripper_map[:, :, :] = 0
ret_val = gripper_map


Reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: move to center of target.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of target')
execute(movable, affordance_map=affordance_map)


########################################
#### parse_query_obj ####
########################################
objects = ['block', 'target']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of target.
affordance_map = get_empty_affordance_map()
target = parse_query_obj('target')
x, y, z = target.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### parse_query_obj ####
########################################
objects = ['block', 'target']
# Query: target.
target = detect('target')
ret_val = target


Reward: 0.0
##############################






########################## Starting episode #########################
instruction: slide the block towards the green target
########################################
#### planner ####
########################################
objects = ['block', 'target']
# Query: slide the block towards the green target.
composer("move ee to the right of block") 
composer("close the gripper")
composer("push the block toward center of target")
# done


########################################
#### composer ####
########################################
# Query: move ee to the right of block.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point 10cm to the right of the block')
execute(movable, affordance_map=affordance_map)


########################################
#### parse_query_obj ####
########################################
objects = ['block', 'target']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point 10cm to the right of the block.
affordance_map = get_empty_affordance_map()
block = parse_query_obj('block')
(min_x, min_y, min_z), (max_x, max_y, max_z) = block.aabb
center_x, center_y, center_z = block.position
# 10cm to the right of so we add to y-axis
x = max_x + cm2index(10, 'y')
y = center_y
z = center_z
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### parse_query_obj ####
########################################
objects = ['block', 'target']
# Query: block.
block = detect('block')
ret_val = block


Reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: close the gripper.
movable = parse_query_obj('gripper')
gripper_map = get_gripper_map('close everywhere')
execute(movable, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['block', 'target']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_gripper_map ####
########################################
# Query: close everywhere.
gripper_map = get_empty_gripper_map()
# close everywhere
gripper_map[:, :, :] = 0
ret_val = gripper_map


Reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: push the block toward center of target.
movable = parse_query_obj('block')
affordance_map = get_affordance_map('a point at the center of target')
execute(movable, affordance_map=affordance_map)


########################################
#### parse_query_obj ####
########################################
objects = ['block', 'target']
# Query: block.
block = detect('block')
ret_val = block


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of target.
affordance_map = get_empty_affordance_map()
target = parse_query_obj('target')
x, y, z = target.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### parse_query_obj ####
########################################
objects = ['block', 'target']
# Query: target.
target = detect('target')
ret_val = target






########################## Starting episode #########################
instruction: shut the laptop lid
########################################
#### planner ####
########################################
objects = ['laptop base', 'laptop lid']
# Query: shut the laptop lid.
composer("move in front of the laptop lid")
composer("move back to the laptop lid")
# done


########################################
#### composer ####
########################################
# Query: move in front of the laptop lid.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point 10cm in front of the laptop lid')
execute(movable, affordance_map)


########################################
#### parse_query_obj ####
########################################
objects = ['laptop base', 'laptop lid']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point 10cm in front of the laptop lid.
affordance_map = get_empty_affordance_map()
laptop_lid = parse_query_obj('laptop lid')
(min_x, min_y, min_z), (max_x, max_y, max_z) = laptop_lid.aabb
center_x, center_y, center_z = laptop_lid.position
# 10cm in front of so we add to x-axis
x = max_x + cm2index(10, 'x')
y = center_y
z = center_z
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### parse_query_obj ####
########################################
objects = ['laptop base', 'laptop lid']
# Query: laptop lid.
laptop_lid = detect('laptop lid')
ret_val = laptop_lid


Reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: move back to the laptop lid.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point on the laptop lid')
execute(movable, affordance_map=affordance_map)


########################################
#### parse_query_obj ####
########################################
objects = ['laptop base', 'laptop lid']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point on the laptop lid.
affordance_map = get_empty_affordance_map()
laptop_lid = parse_query_obj('laptop lid')
(min_x, min_y, min_z), (max_x, max_y, max_z) = laptop_lid.aabb
center_x, center_y, center_z = laptop_lid.position
# on the lid so z = max_z
x = center_x
y = center_y
z = max_z
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### parse_query_obj ####
########################################
objects = ['laptop base', 'laptop lid']
# Query: laptop lid.
laptop_lid = detect('laptop lid')
ret_val = laptop_lid






########################## Starting episode #########################
instruction: close the laptop
########################################
#### planner ####
########################################
objects = ['laptop base', 'laptop lid']
# Query: close the laptop.
composer("grab the laptop lid")
composer("move to the laptop base")
# done


########################################
#### composer ####
########################################
# Query: grab the laptop lid.
movable = parse_query_obj('laptop lid')
affordance_map = get_affordance_map('a point at the center of the laptop lid')
gripper_map = get_gripper_map('open everywhere except 1cm around the laptop lid')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['laptop base', 'laptop lid']
# Query: laptop lid.
laptop_lid = detect('laptop lid')
ret_val = laptop_lid


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the laptop lid.
affordance_map = get_empty_affordance_map()
laptop_lid = parse_query_obj('laptop lid')
x, y, z = laptop_lid.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the laptop lid.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the laptop lid
laptop_lid = parse_query_obj('laptop lid')
set_voxel_by_radius(gripper_map, laptop_lid.position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['laptop base', 'laptop lid']
# Query: laptop lid.
laptop_lid = detect('laptop lid')
ret_val = laptop_lid


########################################
#### parse_query_obj ####
########################################
objects = ['laptop base', 'laptop lid']
# Query: laptop lid.
laptop_lid = detect('laptop lid')
ret_val = laptop_lid


########################################
#### composer ####
########################################
# Query: move to the laptop base.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point on the laptop base')
execute(movable, affordance_map=affordance_map)


########################################
#### parse_query_obj ####
########################################
objects = ['laptop base', 'laptop lid']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point on the laptop base.
affordance_map = get_empty_affordance_map()
laptop_base = parse_query_obj('laptop base')
(min_x, min_y, min_z), (max_x, max_y, max_z) = laptop_base.aabb
center_x, center_y, center_z = laptop_base.position
# on the base so z = min_z
x = center_x
y = center_y
z = min_z
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### parse_query_obj ####
########################################
objects = ['laptop base', 'laptop lid']
# Query: laptop base.
laptop_base = detect('laptop base')
ret_val = laptop_base


Reward: 0.0
##############################






########################## Starting episode #########################
instruction: close laptop lid
########################################
#### planner ####
########################################
objects = ['laptop base', 'laptop lid']
# Query: close laptop lid.
composer("grab the laptop lid")
composer("move to the laptop base")
# done


########################################
#### composer ####
########################################
# Query: grab the laptop lid.
movable = parse_query_obj('laptop lid')
affordance_map = get_affordance_map('a point at the center of the laptop lid')
gripper_map = get_gripper_map('open everywhere except 1cm around the laptop lid')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['laptop base', 'laptop lid']
# Query: laptop lid.
laptop_lid = detect('laptop lid')
ret_val = laptop_lid


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the laptop lid.
affordance_map = get_empty_affordance_map()
laptop_lid = parse_query_obj('laptop lid')
x, y, z = laptop_lid.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the laptop lid.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the laptop lid
laptop_lid = parse_query_obj('laptop lid')
set_voxel_by_radius(gripper_map, laptop_lid.position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['laptop base', 'laptop lid']
# Query: laptop lid.
laptop_lid = detect('laptop lid')
ret_val = laptop_lid


########################################
#### parse_query_obj ####
########################################
objects = ['laptop base', 'laptop lid']
# Query: laptop lid.
laptop_lid = detect('laptop lid')
ret_val = laptop_lid


########################################
#### composer ####
########################################
# Query: move to the laptop base.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point on the laptop base')
execute(movable, affordance_map=affordance_map)


########################################
#### parse_query_obj ####
########################################
objects = ['laptop base', 'laptop lid']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point on the laptop base.
affordance_map = get_empty_affordance_map()
laptop_base = parse_query_obj('laptop base')
(min_x, min_y, min_z), (max_x, max_y, max_z) = laptop_base.aabb
center_x, center_y, center_z = laptop_base.position
# on the base so z = min_z
x = center_x
y = center_y
z = min_z
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### parse_query_obj ####
########################################
objects = ['laptop base', 'laptop lid']
# Query: laptop base.
laptop_base = detect('laptop base')
ret_val = laptop_base


Reward: 0.0
##############################






########################## Starting episode #########################
instruction: shut the laptop lid
########################################
#### planner ####
########################################
objects = ['laptop base', 'laptop lid']
# Query: shut the laptop lid.
composer("move the laptop lid")
composer("move to the laptop base")
# done


########################################
#### composer ####
########################################
# Query: move the laptop lid.
movable = parse_query_obj('laptop lid')
affordance_map = get_affordance_map('a point 10cm in front of the laptop lid')
execute(movable, affordance_map)


########################################
#### parse_query_obj ####
########################################
objects = ['laptop base', 'laptop lid']
# Query: laptop lid.
laptop_lid = detect('laptop lid')
ret_val = laptop_lid


########################################
#### get_affordance_map ####
########################################
# Query: a point 10cm in front of the laptop lid.
affordance_map = get_empty_affordance_map()
laptop_lid = parse_query_obj('laptop lid')
(min_x, min_y, min_z), (max_x, max_y, max_z) = laptop_lid.aabb
center_x, center_y, center_z = laptop_lid.position
# 10cm in front of so we add to x-axis
x = max_x + cm2index(10, 'x')
y = center_y
z = center_z
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### parse_query_obj ####
########################################
objects = ['laptop base', 'laptop lid']
# Query: laptop lid.
laptop_lid = detect('laptop lid')
ret_val = laptop_lid


########################################
#### composer ####
########################################
# Query: move to the laptop base.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point on the laptop base')
execute(movable, affordance_map=affordance_map)


########################################
#### parse_query_obj ####
########################################
objects = ['laptop base', 'laptop lid']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper






########################## Starting episode #########################
instruction: shut the laptop lid
########################################
#### planner ####
########################################
objects = ['laptop base', 'laptop lid']
# Query: shut the laptop lid.
composer("grasp the laptop lid")
composer("move in front of the laptop base")
# done


########################################
#### get_affordance_map ####
########################################
# Query: a point on the laptop base.
affordance_map = get_empty_affordance_map()
laptop_base = parse_query_obj('laptop base')
(min_x, min_y, min_z), (max_x, max_y, max_z) = laptop_base.aabb
center_x, center_y, center_z = laptop_base.position
# on the base so z = min_z
x = center_x
y = center_y
z = min_z
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### parse_query_obj ####
########################################
objects = ['laptop base', 'laptop lid']
# Query: laptop base.
laptop_base = detect('laptop base')
ret_val = laptop_base


########################################
#### composer ####
########################################
# Query: grasp the laptop lid.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the laptop lid')
gripper_map = get_gripper_map('open everywhere except 1cm around the laptop lid')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['laptop base', 'laptop lid']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the laptop lid.
affordance_map = get_empty_affordance_map()
laptop_lid = parse_query_obj('laptop lid')
x, y, z = laptop_lid.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the laptop lid.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the laptop lid
laptop_lid = parse_query_obj('laptop lid')
set_voxel_by_radius(gripper_map, laptop_lid.position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['laptop base', 'laptop lid']
# Query: laptop lid.
laptop_lid = detect('laptop lid')
ret_val = laptop_lid


########################################
#### parse_query_obj ####
########################################
objects = ['laptop base', 'laptop lid']
# Query: laptop lid.
laptop_lid = detect('laptop lid')
ret_val = laptop_lid


Reward: 0.0
##############################


Reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: move in front of the laptop base.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point in front of the laptop base')
execute(movable, affordance_map=affordance_map)


########################################
#### parse_query_obj ####
########################################
objects = ['laptop base', 'laptop lid']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point in front of the laptop base.
affordance_map = get_empty_affordance_map()
laptop_base = parse_query_obj('laptop base')
(min_x, min_y, min_z), (max_x, max_y, max_z) = laptop_base.aabb
center_x, center_y, center_z = laptop_base.position
# in front of so we add to x-axis
x = max_x + cm2index(10, 'x')
y = center_y
z = center_z
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### parse_query_obj ####
########################################
objects = ['laptop base', 'laptop lid']
# Query: laptop base.
laptop_base = detect('laptop base')
ret_val = laptop_base


Reward: 0.0
##############################






########################## Starting episode #########################
instruction: shut the laptop lid
########################################
#### planner ####
########################################
objects = ['laptop base', 'laptop lid']
# Query: shut the laptop lid.
composer("grasp the top of the laptop lid")
composer("move on the laptop base")
# done


########################################
#### composer ####
########################################
# Query: grasp the top of the laptop lid.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the top of the laptop lid')
gripper_map = get_gripper_map('open everywhere except 1cm around the top of the laptop lid')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['laptop base', 'laptop lid']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the top of the laptop lid.
affordance_map = get_empty_affordance_map()
laptop_lid = parse_query_obj('laptop lid')
(min_x, min_y, min_z), (max_x, max_y, max_z) = laptop_lid.aabb
center_x, center_y, center_z = laptop_lid.position
# center of the top of the laptop lid so we add half of the height to z-axis
x = center_x
y = center_y
z = center_z + cm2index((max_z - min_z) / 2, 'z')
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the top of the laptop lid.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the top of the laptop lid
laptop_lid = parse_query_obj('laptop lid')
set_voxel_by_radius(gripper_map, laptop_lid.position, radius_cm=1, value=0, axis='z')
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['laptop base', 'laptop lid']
# Query: laptop lid.
laptop_lid = detect('laptop lid')
ret_val = laptop_lid


########################################
#### parse_query_obj ####
########################################
objects = ['laptop base', 'laptop lid']
# Query: laptop lid.
laptop_lid = detect('laptop lid')
ret_val = laptop_lid






########################## Starting episode #########################
instruction: shut the laptop lid
########################################
#### planner ####
########################################
objects = ['laptop base', 'laptop lid']
# Query: shut the laptop lid.
composer("grasp the top of the laptop lid")
composer("move on the laptop base")
# done


########################################
#### composer ####
########################################
# Query: grasp the top of the laptop lid.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the top of the laptop lid')
gripper_map = get_gripper_map('open everywhere except 1cm around the top of the laptop lid')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['laptop base', 'laptop lid']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the top of the laptop lid.
affordance_map = get_empty_affordance_map()
laptop_lid = parse_query_obj('laptop lid')
(min_x, min_y, min_z), (max_x, max_y, max_z) = laptop_lid.aabb
center_x, center_y, center_z = laptop_lid.position
# center of the top of the laptop lid so we add half of the height to z-axis
x = center_x
y = center_y
z = center_z + cm2index((max_z - min_z) / 2, 'z')
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the top of the laptop lid.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the top of the laptop lid
laptop_lid = parse_query_obj('laptop lid')
set_voxel_by_radius(gripper_map, laptop_lid.position, radius_cm=1, value=0, axis='z')
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['laptop base', 'laptop lid']
# Query: laptop lid.
laptop_lid = detect('laptop lid')
ret_val = laptop_lid


########################################
#### parse_query_obj ####
########################################
objects = ['laptop base', 'laptop lid']
# Query: laptop lid.
laptop_lid = detect('laptop lid')
ret_val = laptop_lid






########################## Starting episode #########################
instruction: shut the laptop lid
########################################
#### planner ####
########################################
objects = ['laptop base', 'laptop lid']
# Query: shut the laptop lid.
composer("grasp the top of the laptop lid")
composer("move on the laptop base")
# done


########################################
#### composer ####
########################################
# Query: grasp the top of the laptop lid.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the top of the laptop lid')
gripper_map = get_gripper_map('open everywhere except 1cm around the top of the laptop lid')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['laptop base', 'laptop lid']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the top of the laptop lid.
affordance_map = get_empty_affordance_map()
laptop_lid = parse_query_obj('laptop lid')
(min_x, min_y, min_z), (max_x, max_y, max_z) = laptop_lid.aabb
center_x, center_y, center_z = laptop_lid.position
# top of the laptop lid so z = max_z
x = center_x
y = center_y
z = max_z
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the top of the laptop lid.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the top of the laptop lid
laptop_lid = parse_query_obj('laptop lid')
set_voxel_by_radius(gripper_map, laptop_lid.position, radius_cm=1, value=0, axis='z')
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['laptop base', 'laptop lid']
# Query: laptop lid.
laptop_lid = detect('laptop lid')
ret_val = laptop_lid


########################################
#### parse_query_obj ####
########################################
objects = ['laptop base', 'laptop lid']
# Query: laptop lid.
laptop_lid = detect('laptop lid')
ret_val = laptop_lid






########################## Starting episode #########################
instruction: shut the laptop lid
########################################
#### planner ####
########################################
objects = ['laptop base', 'laptop lid']
# Query: shut the laptop lid.
composer("grasp the top of the laptop lid")
composer("move on the laptop base")
# done


########################################
#### composer ####
########################################
# Query: grasp the top of the laptop lid.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the top of the laptop lid')
gripper_map = get_gripper_map('open everywhere except 1cm around the top of the laptop lid')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['laptop base', 'laptop lid']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the top of the laptop lid.
affordance_map = get_empty_affordance_map()
laptop_lid = parse_query_obj('laptop lid')
(min_x, min_y, min_z), (max_x, max_y, max_z) = laptop_lid.aabb
center_x, center_y, center_z = laptop_lid.position
# center of the top of the laptop lid so we add half of the height to z-axis
x = center_x
y = center_y
z = center_z + cm2index((max_z - min_z) / 2, 'z')
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the top of the laptop lid.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the top of the laptop lid
laptop_lid = parse_query_obj('laptop lid')
set_voxel_by_radius(gripper_map, laptop_lid.position, radius_cm=1, value=0, axis='z')
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['laptop base', 'laptop lid']
# Query: laptop lid.
laptop_lid = detect('laptop lid')
ret_val = laptop_lid


########################################
#### parse_query_obj ####
########################################
objects = ['laptop base', 'laptop lid']
# Query: laptop lid.
laptop_lid = detect('laptop lid')
ret_val = laptop_lid


Reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: move on the laptop base.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point on the laptop base')
execute(movable, affordance_map=affordance_map)


########################################
#### parse_query_obj ####
########################################
objects = ['laptop base', 'laptop lid']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point on the laptop base.
affordance_map = get_empty_affordance_map()
laptop_base = parse_query_obj('laptop base')
(min_x, min_y, min_z), (max_x, max_y, max_z) = laptop_base.aabb
center_x, center_y, center_z = laptop_base.position
# on the base so z = min_z
x = center_x
y = center_y
z = min_z
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### parse_query_obj ####
########################################
objects = ['laptop base', 'laptop lid']
# Query: laptop base.
laptop_base = detect('laptop base')
ret_val = laptop_base


Reward: 0.0
##############################






########################## Starting episode #########################
instruction: close the laptop
########################################
#### planner ####
########################################
objects = ['laptop base', 'laptop lid']
# Query: close the laptop.
composer("grasp 3cm below the top of the laptop lid")
composer("move on the laptop base")
# done


########################################
#### composer ####
########################################
# Query: grasp 3cm below the top of the laptop lid.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point 3cm below the top of the laptop lid')
gripper_map = get_gripper_map('open everywhere except 1cm around the laptop lid')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['laptop base', 'laptop lid']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point 3cm below the top of the laptop lid.
affordance_map = get_empty_affordance_map()
laptop_lid = parse_query_obj('laptop lid')
(min_x, min_y, min_z), (max_x, max_y, max_z) = laptop_lid.aabb
center_x, center_y, center_z = laptop_lid.position
# 3cm below the top of so we subtract from z-axis
x = center_x
y = center_y
z = max_z - cm2index(3, 'z')
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the laptop lid.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the laptop lid
laptop_lid = parse_query_obj('laptop lid')
set_voxel_by_radius(gripper_map, laptop_lid.position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['laptop base', 'laptop lid']
# Query: laptop lid.
laptop_lid = detect('laptop lid')
ret_val = laptop_lid


########################################
#### parse_query_obj ####
########################################
objects = ['laptop base', 'laptop lid']
# Query: laptop lid.
laptop_lid = detect('laptop lid')
ret_val = laptop_lid


Reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: move on the laptop base.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point on the laptop base')
execute(movable, affordance_map=affordance_map)


########################################
#### parse_query_obj ####
########################################
objects = ['laptop base', 'laptop lid']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point on the laptop base.
affordance_map = get_empty_affordance_map()
laptop_base = parse_query_obj('laptop base')
(min_x, min_y, min_z), (max_x, max_y, max_z) = laptop_base.aabb
center_x, center_y, center_z = laptop_base.position
# on the base so z = min_z
x = center_x
y = center_y
z = min_z
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### parse_query_obj ####
########################################
objects = ['laptop base', 'laptop lid']
# Query: laptop base.
laptop_base = detect('laptop base')
ret_val = laptop_base


Reward: 1.0
##############################






########################## Starting episode #########################
instruction: unscrew the bottle cap then remove it from the wine bottle




########################## Starting episode #########################
instruction: press the button with the maroon base
########################################
#### planner ####
########################################
objects = ['target button']
# Query: press the button with the maroon base.
composer("grasp the target button")
composer("back to default pose")
composer("move to the center of the target button")
composer("close the gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the target button.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the target button')
gripper_map = get_gripper_map('open everywhere except 1cm around the target button')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['target button']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the target button.
affordance_map = get_empty_affordance_map()
target_button = parse_query_obj('target button')
x, y, z = target_button.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the target button.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the target button
target_button = parse_query_obj('target button')
set_voxel_by_radius(gripper_map, target_button.position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['target button']
# Query: target button.
target_button = detect('target button')
ret_val = target_button


########################################
#### parse_query_obj ####
########################################
objects = ['target button']
# Query: target button.
target_button = detect('target button')
ret_val = target_button


Reward: 1.0
##############################


########################################
#### composer ####
########################################
# Query: back to default pose.
reset_to_default_pose()


########################################
#### composer ####
########################################
# Query: move to the center of the target button.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the target button')
execute(movable, affordance_map=affordance_map)


########################################
#### parse_query_obj ####
########################################
objects = ['target button']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the target button.
affordance_map = get_empty_affordance_map()
target_button = parse_query_obj('target button')
x, y, z = target_button.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### parse_query_obj ####
########################################
objects = ['target button']
# Query: target button.
target_button = detect('target button')
ret_val = target_button


Reward: 1.0
##############################


########################################
#### composer ####
########################################
# Query: close the gripper.
movable = parse_query_obj('gripper')
gripper_map = get_gripper_map('close everywhere')
execute(movable, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['target button']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_gripper_map ####
########################################
# Query: close everywhere.
gripper_map = get_empty_gripper_map()
# close everywhere
gripper_map[:, :, :] = 0
ret_val = gripper_map


Reward: 1.0
##############################


########################################
#### composer ####
########################################
# Query: back to default pose.
reset_to_default_pose()






########################## Starting episode #########################
instruction: press the button with the yellow base
########################################
#### planner ####
########################################
objects = ['target button']
# Query: press the button with the yellow base.
composer("move to 30cm on top of the button")
# composer("move to 5cm on top of the button")
# composer("close gripper")
# composer("move down 2cm under the button")
# composer("back to default pose")
# done


########################################
#### composer ####
########################################
# Query: move to 30cm on top of the button.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point 30cm above the button')
execute(movable, affordance_map=affordance_map)


########################################
#### parse_query_obj ####
########################################
objects = ['target button']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point 30cm above the button.
affordance_map = get_empty_affordance_map()
button = parse_query_obj('button')
(min_x, min_y, min_z), (max_x, max_y, max_z) = button.aabb
center_x, center_y, center_z = button.position
# 30cm above so we add to z-axis
x = center_x
y = center_y
z = max_z + cm2index(30, 'z')
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### parse_query_obj ####
########################################
objects = ['target button']
# Query: button.
target_button = detect('target button')
ret_val = target_button


Reward: 0.0
##############################






########################## Starting episode #########################
instruction: push the cyan button
########################################
#### planner ####
########################################
objects = ['target button']
# Query: push the cyan button.
composer("move to 0cm forward")
# composer("move to 5cm on top of the button")
# composer("close gripper")
# composer("move down 2cm under the button")
# composer("back to default pose")
# done


########################################
#### composer ####
########################################
# Query: move to 0cm forward.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point 0cm in front of the gripper')
execute(movable, affordance_map)


########################################
#### parse_query_obj ####
########################################
objects = ['target button']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point 0cm in front of the gripper.
affordance_map = get_empty_affordance_map()
gripper = parse_query_obj('gripper')
(min_x, min_y, min_z), (max_x, max_y, max_z) = gripper.aabb
center_x, center_y, center_z = gripper.position
# 0cm in front of so we add to x-axis
x = max_x + cm2index(0, 'x')
y = center_y
z = center_z
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### parse_query_obj ####
########################################
objects = ['target button']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


Reward: 0.0
##############################






########################## Starting episode #########################
instruction: push down the black button
########################################
#### planner ####
########################################
objects = ['target button']
# Query: push down the black button.
composer("move to 2cm forward")
# composer("move to 5cm on top of the button")
# composer("close gripper")
# composer("move down 2cm under the button")
# composer("back to default pose")
# done


########################################
#### composer ####
########################################
# Query: move to 2cm forward.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point 2cm in front of the gripper')
execute(movable, affordance_map)


########################################
#### parse_query_obj ####
########################################
objects = ['target button']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point 2cm in front of the gripper.
affordance_map = get_empty_affordance_map()
gripper = parse_query_obj('gripper')
(min_x, min_y, min_z), (max_x, max_y, max_z) = gripper.aabb
center_x, center_y, center_z = gripper.position
# 2cm in front of so we add to x-axis
x = max_x + cm2index(2, 'x')
y = center_y
z = center_z
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### parse_query_obj ####
########################################
objects = ['target button']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


Reward: 0.0
##############################






########################## Starting episode #########################
instruction: open wine bottle




########################## Starting episode #########################
instruction: open wine bottle



########################## Starting episode #########################
instruction: open wine bottle



########################## Starting episode #########################
instruction: screw open the wine bottle



########################## Starting episode #########################
instruction: unscrew the bottle cap then remove it from the wine bottle



########################## Starting episode #########################
instruction: slide the knife out of the knife block and put it down on the chopping board
########################################
#### planner ####
########################################
objects = ['chopping board', 'knife', 'knife block']
# Query: slide the knife out of the knife block and put it down on the chopping board.
composer("grasp the knife")
composer("back to default pose")
composer("move to 10cm on top of the chopping board")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the knife.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the knife')
gripper_map = get_gripper_map('open everywhere except 1cm around the knife')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['chopping board', 'knife', 'knife block']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the knife.
affordance_map = get_empty_affordance_map()
knife = parse_query_obj('knife')
x, y, z = knife.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the knife.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the knife
knife = parse_query_obj('knife')
set_voxel_by_radius(gripper_map, knife.position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['chopping board', 'knife', 'knife block']
# Query: knife.
knife = detect('knife')
ret_val = knife


########################################
#### parse_query_obj ####
########################################
objects = ['chopping board', 'knife', 'knife block']
# Query: knife.
knife = detect('knife')
ret_val = knife


Reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: back to default pose.
reset_to_default_pose()


########################################
#### composer ####
########################################
# Query: move to 10cm on top of the chopping board.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point 10cm above the chopping board')
execute(movable, affordance_map=affordance_map)


########################################
#### parse_query_obj ####
########################################
objects = ['chopping board', 'knife', 'knife block']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point 10cm above the chopping board.
affordance_map = get_empty_affordance_map()
chopping_board = parse_query_obj('chopping board')
(min_x, min_y, min_z), (max_x, max_y, max_z) = chopping_board.aabb
center_x, center_y, center_z = chopping_board.position
# 10cm above so we add to z-axis
x = center_x
y = center_y
z = max_z + cm2index(10, 'z')
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### parse_query_obj ####
########################################
objects = ['chopping board', 'knife', 'knife block']
# Query: chopping board.
chopping_board = detect('chopping board')
ret_val = chopping_board


Reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: open gripper.
movable = parse_query_obj('gripper')
gripper_map = get_gripper_map('open everywhere')
execute(movable, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['chopping board', 'knife', 'knife block']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
ret_val = gripper_map


Reward: 1.0
##############################


########################################
#### composer ####
########################################
# Query: back to default pose.
reset_to_default_pose()





########################## Starting episode #########################
instruction: take the green pepper off of the scales
########################################
#### planner ####
########################################
objects = ['scale', 'green pepper', 'red pepper', 'yellow pepper']
# Query: take the green pepper off of the scales.
composer("grasp the green pepper")
composer("back to default pose")
composer("move to 10cm on top of the scale")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the green pepper.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the green pepper')
gripper_map = get_gripper_map('open everywhere except 1cm around the green pepper')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['scale', 'green pepper', 'red pepper', 'yellow pepper']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the green pepper.
affordance_map = get_empty_affordance_map()
green_pepper = parse_query_obj('green pepper')
x, y, z = green_pepper.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the green pepper.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the green pepper
green_pepper = parse_query_obj('green pepper')
set_voxel_by_radius(gripper_map, green_pepper.position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['scale', 'green pepper', 'red pepper', 'yellow pepper']
# Query: green pepper.
green_pepper = detect('green pepper')
ret_val = green_pepper


########################################
#### parse_query_obj ####
########################################
objects = ['scale', 'green pepper', 'red pepper', 'yellow pepper']
# Query: green pepper.
green_pepper = detect('green pepper')
ret_val = green_pepper


reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: back to default pose.
reset_to_default_pose()


########################################
#### composer ####
########################################
# Query: move to 10cm on top of the scale.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point 10cm above the scale')
execute(movable, affordance_map=affordance_map)


########################################
#### parse_query_obj ####
########################################
objects = ['scale', 'green pepper', 'red pepper', 'yellow pepper']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point 10cm above the scale.
affordance_map = get_empty_affordance_map()
scale = parse_query_obj('scale')
(min_x, min_y, min_z), (max_x, max_y, max_z) = scale.aabb
center_x, center_y, center_z = scale.position
# 10cm above so we add to z-axis
x = center_x
y = center_y
z = max_z + cm2index(10, 'z')
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### parse_query_obj ####
########################################
objects = ['scale', 'green pepper', 'red pepper', 'yellow pepper']
# Query: scale.
scale = detect('scale')
ret_val = scale


reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: open gripper.
movable = parse_query_obj('gripper')
gripper_map = get_gripper_map('open everywhere')
execute(movable, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['scale', 'green pepper', 'red pepper', 'yellow pepper']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
ret_val = gripper_map


reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: back to default pose.
reset_to_default_pose()





########################## Starting episode #########################
instruction: put the yellow item on the item



########################## Starting episode #########################
instruction: take the yellow pepper off of the scales
########################################
#### planner ####
########################################
objects = ['scale', 'green pepper', 'red pepper', 'yellow pepper']
# Query: There is a scale on the table with 'green pepper', 'red pepper', 'yellow pepper' on it. Please put the green pepper from the scale onto the table..
composer("grasp the green pepper")
composer("back to default pose")
composer("move to 10cm on top of the table")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the green pepper.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the green pepper')
gripper_map = get_gripper_map('open everywhere except 1cm around the green pepper')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['scale', 'green pepper', 'red pepper', 'yellow pepper']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the green pepper.
affordance_map = get_empty_affordance_map()
green_pepper = parse_query_obj('green pepper')
x, y, z = green_pepper.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the green pepper.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the green pepper
green_pepper = parse_query_obj('green pepper')
set_voxel_by_radius(gripper_map, green_pepper.position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['scale', 'green pepper', 'red pepper', 'yellow pepper']
# Query: green pepper.
green_pepper = detect('green pepper')
ret_val = green_pepper


########################################
#### parse_query_obj ####
########################################
objects = ['scale', 'green pepper', 'red pepper', 'yellow pepper']
# Query: green pepper.
green_pepper = detect('green pepper')
ret_val = green_pepper


reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: back to default pose.
reset_to_default_pose()


########################################
#### composer ####
########################################
# Query: move to 10cm on top of the table.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point 10cm above the table')
execute(movable, affordance_map=affordance_map)


########################################
#### parse_query_obj ####
########################################
objects = ['scale', 'green pepper', 'red pepper', 'yellow pepper']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point 10cm above the table.
affordance_map = get_empty_affordance_map()
table = parse_query_obj('table')
(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb
center_x, center_y, center_z = table.position
# 10cm above so we add to z-axis
x = center_x
y = center_y
z = max_z + cm2index(10, 'z')
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### parse_query_obj ####
########################################
objects = ['scale', 'green pepper', 'red pepper', 'yellow pepper']
# Query: table.
table = detect('table')
ret_val = table


reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: open gripper.
movable = parse_query_obj('gripper')
gripper_map = get_gripper_map('open everywhere')
execute(movable, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['scale', 'green pepper', 'red pepper', 'yellow pepper']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
ret_val = gripper_map


reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: back to default pose.
reset_to_default_pose()





########################## Starting episode #########################
instruction: push down the yellow button
########################################
#### planner ####
########################################
objects = ['target button']
# Query: The button is attached to the table surface, circular in shape, and has a diameter of 6cm. The width of the gripper is 15cm, and the height of the gripper is 5cm. Please press the button..
composer("move to 3cm on top of the target button")
composer("close the gripper")
composer("move down by 5cm")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: move to 3cm on top of the target button.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point 3cm above the target button')
execute(movable, affordance_map=affordance_map)


########################################
#### parse_query_obj ####
########################################
objects = ['target button']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point 3cm above the target button.
affordance_map = get_empty_affordance_map()
target_button = parse_query_obj('target button')
(min_x, min_y, min_z), (max_x, max_y, max_z) = target_button.aabb
center_x, center_y, center_z = target_button.position
# 3cm above so we add to z-axis
x = center_x
y = center_y
z = max_z + cm2index(3, 'z')
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### parse_query_obj ####
########################################
objects = ['target button']
# Query: target button.
target_button = detect('target button')
ret_val = target_button


reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: close the gripper.
movable = parse_query_obj('gripper')
gripper_map = get_gripper_map('close everywhere')
execute(movable, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['target button']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_gripper_map ####
########################################
# Query: close everywhere.
gripper_map = get_empty_gripper_map()
# close everywhere
gripper_map[:, :, :] = 0
ret_val = gripper_map


reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: move down by 5cm.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map(f'a point 5cm below {movable.position}')
execute(movable, affordance_map)


########################################
#### parse_query_obj ####
########################################
objects = ['target button']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point 5cm below [39 57  5].
affordance_map = get_empty_affordance_map()
# 5cm below so we subtract from z-axis
x = 39
y = 57
z = 5 - cm2index(5, 'z')
affordance_map[x, y, z] = 1
ret_val = affordance_map


reward: 1.0
##############################


########################################
#### composer ####
########################################
# Query: back to default pose.
reset_to_default_pose()





########################## Starting episode #########################
instruction: pick up the sugar and place it in the cupboard
########################################
#### planner ####
########################################
objects = ['cupboard', 'chocolate jello', 'strawberry jello', 'soup', 'tuna', 'spam', 'coffee', 'mustard', 'crackers', 'sugar']
# Query: The head part of the robotic arm with the gripper is 30cm, and the width of the gripper is 12cm. On the table, there is a two-tier cupboard with upper and lower sections. The cupboard is 25cm in height and 20cm in width, and it is empty inside. There are 9 grocery items on the table, among which the spam can needs to be placed in the lower section of the cupboard..
composer("grasp the spam can")
composer("back to default pose")
composer("move to 10cm in front of the lower section of the cupboard")
composer("move down by 15cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the spam can.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the spam can')
gripper_map = get_gripper_map('open everywhere except 1cm around the spam can')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['cupboard', 'chocolate jello', 'strawberry jello', 'soup', 'tuna', 'spam', 'coffee', 'mustard', 'crackers', 'sugar']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the spam can.
affordance_map = get_empty_affordance_map()
spam_can = parse_query_obj('spam can')
x, y, z = spam_can.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the spam can.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the spam can
spam_can = parse_query_obj('spam can')
set_voxel_by_radius(gripper_map, spam_can.position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['cupboard', 'chocolate jello', 'strawberry jello', 'soup', 'tuna', 'spam', 'coffee', 'mustard', 'crackers', 'sugar']
# Query: spam can.
spam = detect('spam')
ret_val = spam


########################################
#### parse_query_obj ####
########################################
objects = ['cupboard', 'chocolate jello', 'strawberry jello', 'soup', 'tuna', 'spam', 'coffee', 'mustard', 'crackers', 'sugar']
# Query: spam can.
spam = detect('spam')
ret_val = spam


reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: back to default pose.
reset_to_default_pose()


########################################
#### composer ####
########################################
# Query: move to 10cm in front of the lower section of the cupboard.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point 10cm in front of the lower section of the cupboard')
execute(movable, affordance_map=affordance_map)


########################################
#### parse_query_obj ####
########################################
objects = ['cupboard', 'chocolate jello', 'strawberry jello', 'soup', 'tuna', 'spam', 'coffee', 'mustard', 'crackers', 'sugar']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point 10cm in front of the lower section of the cupboard.
affordance_map = get_empty_affordance_map()
lower_section = parse_query_obj('lower section of the cupboard')
(min_x, min_y, min_z), (max_x, max_y, max_z) = lower_section.aabb
center_x, center_y, center_z = lower_section.position
# 10cm in front of so we add to x-axis
x = max_x + cm2index(10, 'x')
y = center_y
z = center_z
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### parse_query_obj ####
########################################
objects = ['cupboard', 'chocolate jello', 'strawberry jello', 'soup', 'tuna', 'spam', 'coffee', 'mustard', 'crackers', 'sugar']
# Query: lower section of the cupboard.
cupboard = detect('cupboard')
ret_val = cupboard.lower_section





########################## Starting episode #########################
instruction: put away the sugar in the cupboard



########################## Starting episode #########################
instruction: put away the sugar in the cupboard
########################################
#### planner ####
########################################
objects = ['cupboard', 'chocolate jello', 'strawberry jello', 'soup', 'tuna', 'spam', 'coffee', 'mustard', 'crackers', 'sugar']
# Query: The head part of the robotic arm with the gripper is 30cm, and the width of the gripper is 12cm. On the table, there is a two-tier cupboard with upper and lower sections. The cupboard is 25cm in height and 20cm in width, and it is empty inside. There are 9 grocery items on the table, among which the spam can needs to be placed in the lower section of the cupboard..
composer("grasp the spam can")
composer("back to default pose")
composer("move to 10cm in front of the lower section of the cupboard")
composer("move down by 15cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the spam can.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the spam can')
gripper_map = get_gripper_map('open everywhere except 1cm around the spam can')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['cupboard', 'chocolate jello', 'strawberry jello', 'soup', 'tuna', 'spam', 'coffee', 'mustard', 'crackers', 'sugar']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the spam can.
affordance_map = get_empty_affordance_map()
spam_can = parse_query_obj('spam can')
x, y, z = spam_can.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the spam can.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the spam can
spam_can = parse_query_obj('spam can')
set_voxel_by_radius(gripper_map, spam_can.position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['cupboard', 'chocolate jello', 'strawberry jello', 'soup', 'tuna', 'spam', 'coffee', 'mustard', 'crackers', 'sugar']
# Query: spam can.
spam = detect('spam')
ret_val = spam


########################################
#### parse_query_obj ####
########################################
objects = ['cupboard', 'chocolate jello', 'strawberry jello', 'soup', 'tuna', 'spam', 'coffee', 'mustard', 'crackers', 'sugar']
# Query: spam can.
spam = detect('spam')
ret_val = spam


reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: back to default pose.
reset_to_default_pose()


########################################
#### composer ####
########################################
# Query: move to 10cm in front of the lower section of the cupboard.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point 10cm in front of the lower section of the cupboard')
execute(movable, affordance_map=affordance_map)


########################################
#### parse_query_obj ####
########################################
objects = ['cupboard', 'chocolate jello', 'strawberry jello', 'soup', 'tuna', 'spam', 'coffee', 'mustard', 'crackers', 'sugar']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point 10cm in front of the lower section of the cupboard.
affordance_map = get_empty_affordance_map()
cupboard = parse_query_obj('lower section of the cupboard')
(min_x, min_y, min_z), (max_x, max_y, max_z) = cupboard.aabb
center_x, center_y, center_z = cupboard.position
# 10cm in front of so we add to x-axis
x = max_x + cm2index(10, 'x')
y = center_y
z = center_z
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### parse_query_obj ####
########################################
objects = ['cupboard', 'chocolate jello', 'strawberry jello', 'soup', 'tuna', 'spam', 'coffee', 'mustard', 'crackers', 'sugar']
# Query: lower section of the cupboard.
cupboard = detect('cupboard')
ret_val = cupboard.aabb[0:3]





########################## Starting episode #########################
instruction: move the sugar to the bottom shelf
########################################
#### planner ####
########################################
objects = ['cupboard', 'chocolate jello', 'strawberry jello', 'soup', 'tuna', 'spam', 'coffee', 'mustard', 'crackers', 'sugar']
# Query: The head part of the robotic arm with the gripper is 30cm, and the width of the gripper is 12cm. On the table, there is a two-tier cupboard with upper and lower sections. The cupboard is 25cm in height and 20cm in width, and it is empty inside. There are 9 grocery items on the table, among which the spam can needs to be placed in the cupboard..
composer("grasp the spam can")
composer("back to default pose")
composer("move to 10cm in front of the cupboard")
composer("move to 10cm on top of the cupboard")
composer("open gripper")
composer("back to default pose")
# done


########################################
#### composer ####
########################################
# Query: grasp the spam can.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the spam can')
gripper_map = get_gripper_map('open everywhere except 1cm around the spam can')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['cupboard', 'chocolate jello', 'strawberry jello', 'soup', 'tuna', 'spam', 'coffee', 'mustard', 'crackers', 'sugar']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the spam can.
affordance_map = get_empty_affordance_map()
spam_can = parse_query_obj('spam can')
x, y, z = spam_can.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the spam can.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the spam can
spam_can = parse_query_obj('spam can')
set_voxel_by_radius(gripper_map, spam_can.position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['cupboard', 'chocolate jello', 'strawberry jello', 'soup', 'tuna', 'spam', 'coffee', 'mustard', 'crackers', 'sugar']
# Query: spam can.
spam = detect('spam')
ret_val = spam


########################################
#### parse_query_obj ####
########################################
objects = ['cupboard', 'chocolate jello', 'strawberry jello', 'soup', 'tuna', 'spam', 'coffee', 'mustard', 'crackers', 'sugar']
# Query: spam can.
spam = detect('spam')
ret_val = spam


reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: back to default pose.
reset_to_default_pose()


########################################
#### composer ####
########################################
# Query: move to 10cm in front of the cupboard.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point 10cm in front of the cupboard')
execute(movable, affordance_map=affordance_map)


########################################
#### parse_query_obj ####
########################################
objects = ['cupboard', 'chocolate jello', 'strawberry jello', 'soup', 'tuna', 'spam', 'coffee', 'mustard', 'crackers', 'sugar']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point 10cm in front of the cupboard.
affordance_map = get_empty_affordance_map()
cupboard = parse_query_obj('cupboard')
(min_x, min_y, min_z), (max_x, max_y, max_z) = cupboard.aabb
center_x, center_y, center_z = cupboard.position
# 10cm in front of so we add to x-axis
x = max_x + cm2index(10, 'x')
y = center_y
z = center_z
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### parse_query_obj ####
########################################
objects = ['cupboard', 'chocolate jello', 'strawberry jello', 'soup', 'tuna', 'spam', 'coffee', 'mustard', 'crackers', 'sugar']
# Query: cupboard.
cupboard = detect('cupboard')
ret_val = cupboard


reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: move to 10cm on top of the cupboard.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point 10cm above the cupboard')
execute(movable, affordance_map=affordance_map)


########################################
#### parse_query_obj ####
########################################
objects = ['cupboard', 'chocolate jello', 'strawberry jello', 'soup', 'tuna', 'spam', 'coffee', 'mustard', 'crackers', 'sugar']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point 10cm above the cupboard.
affordance_map = get_empty_affordance_map()
cupboard = parse_query_obj('cupboard')
(min_x, min_y, min_z), (max_x, max_y, max_z) = cupboard.aabb
center_x, center_y, center_z = cupboard.position
# 10cm above so we add to z-axis
x = center_x
y = center_y
z = max_z + cm2index(10, 'z')
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### parse_query_obj ####
########################################
objects = ['cupboard', 'chocolate jello', 'strawberry jello', 'soup', 'tuna', 'spam', 'coffee', 'mustard', 'crackers', 'sugar']
# Query: cupboard.
cupboard = detect('cupboard')
ret_val = cupboard


reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: open gripper.
movable = parse_query_obj('gripper')
gripper_map = get_gripper_map('open everywhere')
execute(movable, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['cupboard', 'chocolate jello', 'strawberry jello', 'soup', 'tuna', 'spam', 'coffee', 'mustard', 'crackers', 'sugar']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
ret_val = gripper_map


reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: back to default pose.
reset_to_default_pose()





########################## Starting episode #########################
instruction: pick up the sugar and place it in the cupboard
########################################
#### planner ####
########################################
objects = ['cupboard', 'chocolate jello', 'strawberry jello', 'soup', 'tuna', 'spam', 'coffee', 'mustard', 'crackers', 'sugar']
# Query: The head part of the robotic arm with the gripper is 30cm, and the width of the gripper is 12cm. On the table, there is a two-tier cupboard with upper and lower sections. The cupboard is 25cm in height and 20cm in width, and it is empty inside. There are 9 grocery items on the table, among which the spam can needs to be placed in the cupboard..
composer("grasp the spam can")
composer("back to default pose")
composer("move to the center of the cupboard entrance, 15cm inside")
composer("open gripper")
composer("back to default pose")
# done


########################################
#### composer ####
########################################
# Query: grasp the spam can.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the spam can')
gripper_map = get_gripper_map('open everywhere except 1cm around the spam can')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['cupboard', 'chocolate jello', 'strawberry jello', 'soup', 'tuna', 'spam', 'coffee', 'mustard', 'crackers', 'sugar']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the spam can.
affordance_map = get_empty_affordance_map()
spam_can = parse_query_obj('spam can')
x, y, z = spam_can.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the spam can.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the spam can
spam_can = parse_query_obj('spam can')
set_voxel_by_radius(gripper_map, spam_can.position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['cupboard', 'chocolate jello', 'strawberry jello', 'soup', 'tuna', 'spam', 'coffee', 'mustard', 'crackers', 'sugar']
# Query: spam can.
spam_can = detect('spam')
ret_val = spam_can


########################################
#### parse_query_obj ####
########################################
objects = ['cupboard', 'chocolate jello', 'strawberry jello', 'soup', 'tuna', 'spam', 'coffee', 'mustard', 'crackers', 'sugar']
# Query: spam can.
spam_can = detect('spam')
ret_val = spam_can


reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: back to default pose.
reset_to_default_pose()


########################################
#### composer ####
########################################
# Query: move to the center of the cupboard entrance, 15cm inside.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point 15cm inside the center of the cupboard entrance')
execute(movable, affordance_map=affordance_map)


########################################
#### parse_query_obj ####
########################################
objects = ['cupboard', 'chocolate jello', 'strawberry jello', 'soup', 'tuna', 'spam', 'coffee', 'mustard', 'crackers', 'sugar']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point 15cm inside the center of the cupboard entrance.
affordance_map = get_empty_affordance_map()
cupboard_entrance = parse_query_obj('cupboard entrance')
# 15cm inside the center of the cupboard entrance, assuming negative normal direction
moving_dir = -cupboard_entrance.normal
affordance_xyz = cupboard_entrance.position + cm2index(15, moving_dir)
affordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1
ret_val = affordance_map


########################################
#### parse_query_obj ####
########################################
objects = ['cupboard', 'chocolate jello', 'strawberry jello', 'soup', 'tuna', 'spam', 'coffee', 'mustard', 'crackers', 'sugar']
# Query: cupboard entrance.
cupboard = detect('cupboard')
ret_val = cupboard


reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: open gripper.
movable = parse_query_obj('gripper')
gripper_map = get_gripper_map('open everywhere')
execute(movable, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['cupboard', 'chocolate jello', 'strawberry jello', 'soup', 'tuna', 'spam', 'coffee', 'mustard', 'crackers', 'sugar']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
ret_val = gripper_map


reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: back to default pose.
reset_to_default_pose()





########################## Starting episode #########################
instruction: rotate the wheel on the clock to make it show 12.15
########################################
#### planner ####
########################################
objects = ['minute hand', 'clock stand', 'hour hand', 'crown']
# Query: .
composer("grasp the crown")


########################################
#### composer ####
########################################
# Query: grasp the crown.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the crown')
gripper_map = get_gripper_map('open everywhere except 1cm around the crown')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['minute hand', 'clock stand', 'hour hand', 'crown']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the crown.
affordance_map = get_empty_affordance_map()
crown = parse_query_obj('crown')
x, y, z = crown.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the crown.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the crown
crown = parse_query_obj('crown')
set_voxel_by_radius(gripper_map, crown.position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['minute hand', 'clock stand', 'hour hand', 'crown']
# Query: crown.
crown = detect('crown')
ret_val = crown





########################## Starting episode #########################
instruction: change the clock to 12.15
########################################
#### planner ####
########################################
objects = ['minute hand', 'clock stand', 'hour hand', 'crown']
# Query: .
composer("grasp the crown")


########################################
#### composer ####
########################################
# Query: grasp the crown.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the crown')
gripper_map = get_gripper_map('open everywhere except 1cm around the crown')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['minute hand', 'clock stand', 'hour hand', 'crown']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the crown.
affordance_map = get_empty_affordance_map()
crown = parse_query_obj('crown')
x, y, z = crown.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the crown.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the crown
crown = parse_query_obj('crown')
set_voxel_by_radius(gripper_map, crown.position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['minute hand', 'clock stand', 'hour hand', 'crown']
# Query: crown.
crown = detect('crown')
ret_val = crown


########################################
#### parse_query_obj ####
########################################
objects = ['minute hand', 'clock stand', 'hour hand', 'crown']
# Query: crown.
crown = detect('crown')
ret_val = crown





########################## Starting episode #########################
instruction: rotate the wheel on the clock to make it show 12.15
########################################
#### planner ####
########################################
objects = ['minute hand', 'clock stand', 'hour hand', 'crown']
# Query: rotate the wheel on the clock to make it show 12.15.
composer("grasp the crown")
composer("back to default pose")
composer("rotate the gripper to be 45 degrees slanted relative to the clock stand")
composer("move to 10cm on top of the clock stand")
composer("rotate the gripper to be 15 degrees slanted relative to the clock stand")
composer("open gripper")
composer("back to default pose")
# done


########################################
#### composer ####
########################################
# Query: grasp the crown.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the crown')
gripper_map = get_gripper_map('open everywhere except 1cm around the crown')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['minute hand', 'clock stand', 'hour hand', 'crown']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the crown.
affordance_map = get_empty_affordance_map()
crown = parse_query_obj('crown')
x, y, z = crown.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the crown.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the crown
crown = parse_query_obj('crown')
set_voxel_by_radius(gripper_map, crown.position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['minute hand', 'clock stand', 'hour hand', 'crown']
# Query: crown.
crown = detect('crown')
ret_val = crown


########################################
#### parse_query_obj ####
########################################
objects = ['minute hand', 'clock stand', 'hour hand', 'crown']
# Query: crown.
crown = detect('crown')
ret_val = crown


reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: back to default pose.
reset_to_default_pose()


########################################
#### composer ####
########################################
# Query: rotate the gripper to be 45 degrees slanted relative to the clock stand.
movable = parse_query_obj('gripper')
rotation_map = get_rotation_map('rotate the gripper 45 degrees slanted relative to the clock stand')
execute(movable, rotation_map=rotation_map)


########################################
#### parse_query_obj ####
########################################
objects = ['minute hand', 'clock stand', 'hour hand', 'crown']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_rotation_map ####
########################################
# Query: rotate the gripper 45 degrees slanted relative to the clock stand.
rotation_map = get_empty_rotation_map()
clock_stand = parse_query_obj('clock stand')
face_clock_stand_quat = vec2quat(-clock_stand.normal)
# rotate 45 degrees around the x-axis
rotation_delta = euler2quat(-np.pi / 4, 0, 0)
target_rotation = qmult(face_clock_stand_quat, rotation_delta)
rotation_map[:, :, :] = target_rotation
ret_val = rotation_map


########################################
#### parse_query_obj ####
########################################
objects = ['minute hand', 'clock stand', 'hour hand', 'crown']
# Query: clock stand.
clock_stand = detect('clock stand')
ret_val = clock_stand


reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: move to 10cm on top of the clock stand.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point 10cm above the clock stand')
execute(movable, affordance_map=affordance_map)


########################################
#### parse_query_obj ####
########################################
objects = ['minute hand', 'clock stand', 'hour hand', 'crown']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point 10cm above the clock stand.
affordance_map = get_empty_affordance_map()
clock_stand = parse_query_obj('clock stand')
(min_x, min_y, min_z), (max_x, max_y, max_z) = clock_stand.aabb
center_x, center_y, center_z = clock_stand.position
# 10cm above so we add to z-axis
x = center_x
y = center_y
z = max_z + cm2index(10, 'z')
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### parse_query_obj ####
########################################
objects = ['minute hand', 'clock stand', 'hour hand', 'crown']
# Query: clock stand.
clock_stand = detect('clock stand')
ret_val = clock_stand


reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: rotate the gripper to be 15 degrees slanted relative to the clock stand.
movable = parse_query_obj('gripper')
rotation_map = get_rotation_map('rotate the gripper 15 degrees slanted relative to the clock stand')
execute(movable, rotation_map=rotation_map)


########################################
#### parse_query_obj ####
########################################
objects = ['minute hand', 'clock stand', 'hour hand', 'crown']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_rotation_map ####
########################################
# Query: rotate the gripper 15 degrees slanted relative to the clock stand.
rotation_map = get_empty_rotation_map()
clock_stand = parse_query_obj('clock stand')
face_clock_stand_quat = vec2quat(-clock_stand.normal)
# rotate 15 degrees around the x-axis
rotation_delta = euler2quat(-np.pi / 12, 0, 0)
target_rotation = qmult(face_clock_stand_quat, rotation_delta)
rotation_map[:, :, :] = target_rotation
ret_val = rotation_map


########################################
#### parse_query_obj ####
########################################
objects = ['minute hand', 'clock stand', 'hour hand', 'crown']
# Query: clock stand.
clock_stand = detect('clock stand')
ret_val = clock_stand


reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: open gripper.
movable = parse_query_obj('gripper')
gripper_map = get_gripper_map('open everywhere')
execute(movable, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['minute hand', 'clock stand', 'hour hand', 'crown']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
ret_val = gripper_map


reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: back to default pose.
reset_to_default_pose()





########################## Starting episode #########################
instruction: rotate the wheel on the clock to make it show 12.15
########################################
#### planner ####
########################################
objects = ['minute hand', 'clock stand', 'hour hand', 'crown']
# Query: A round clock is standing on the desk. Behind the clock, there is a cylindrical crown with a diameter of 3cm for adjusting the time, which protrudes 3cm from the back of the clock.
Please rotate the wheel on the clock to make it show 12.15..
composer("grasp the crown")
composer("back to default pose")
composer("rotate the gripper to be 45 degrees slanted relative to the clock stand")
composer("move to 10cm on top of the clock stand")
composer("rotate the gripper to be 30 degrees slanted relative to the clock stand")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the crown.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the crown')
gripper_map = get_gripper_map('open everywhere except 1cm around the crown')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['minute hand', 'clock stand', 'hour hand', 'crown']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the crown.
affordance_map = get_empty_affordance_map()
crown = parse_query_obj('crown')
x, y, z = crown.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the crown.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the crown
crown = parse_query_obj('crown')
set_voxel_by_radius(gripper_map, crown.position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['minute hand', 'clock stand', 'hour hand', 'crown']
# Query: crown.
crown = detect('crown')
ret_val = crown


########################################
#### parse_query_obj ####
########################################
objects = ['minute hand', 'clock stand', 'hour hand', 'crown']
# Query: crown.
crown = detect('crown')
ret_val = crown


reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: back to default pose.
reset_to_default_pose()


########################################
#### composer ####
########################################
# Query: rotate the gripper to be 45 degrees slanted relative to the clock stand.
movable = parse_query_obj('gripper')
rotation_map = get_rotation_map('rotate the gripper 45 degrees slanted relative to the clock stand')
execute(movable, rotation_map=rotation_map)


########################################
#### parse_query_obj ####
########################################
objects = ['minute hand', 'clock stand', 'hour hand', 'crown']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_rotation_map ####
########################################
# Query: rotate the gripper 45 degrees slanted relative to the clock stand.
rotation_map = get_empty_rotation_map()
clock_stand = parse_query_obj('clock stand')
face_clock_stand_quat = vec2quat(-clock_stand.normal)
# rotate 45 degrees around the x-axis
rotation_delta = euler2quat(-np.pi / 4, 0, 0)
target_rotation = qmult(face_clock_stand_quat, rotation_delta)
rotation_map[:, :, :] = target_rotation
ret_val = rotation_map


########################################
#### parse_query_obj ####
########################################
objects = ['minute hand', 'clock stand', 'hour hand', 'crown']
# Query: clock stand.
clock_stand = detect('clock stand')
ret_val = clock_stand


reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: move to 10cm on top of the clock stand.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point 10cm above the clock stand')
execute(movable, affordance_map=affordance_map)


########################################
#### parse_query_obj ####
########################################
objects = ['minute hand', 'clock stand', 'hour hand', 'crown']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point 10cm above the clock stand.
affordance_map = get_empty_affordance_map()
clock_stand = parse_query_obj('clock stand')
(min_x, min_y, min_z), (max_x, max_y, max_z) = clock_stand.aabb
center_x, center_y, center_z = clock_stand.position
# 10cm above so we add to z-axis
x = center_x
y = center_y
z = max_z + cm2index(10, 'z')
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### parse_query_obj ####
########################################
objects = ['minute hand', 'clock stand', 'hour hand', 'crown']
# Query: clock stand.
clock_stand = detect('clock stand')
ret_val = clock_stand


reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: rotate the gripper to be 30 degrees slanted relative to the clock stand.
movable = parse_query_obj('gripper')
rotation_map = get_rotation_map('rotate the gripper 30 degrees slanted relative to the clock stand')
execute(movable, rotation_map=rotation_map)


########################################
#### parse_query_obj ####
########################################
objects = ['minute hand', 'clock stand', 'hour hand', 'crown']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_rotation_map ####
########################################
# Query: rotate the gripper 30 degrees slanted relative to the clock stand.
rotation_map = get_empty_rotation_map()
clock_stand = parse_query_obj('clock stand')
face_clock_stand_quat = vec2quat(-clock_stand.normal)
# rotate 30 degrees around the x-axis
rotation_delta = euler2quat(-np.pi / 6, 0, 0)
target_rotation = qmult(face_clock_stand_quat, rotation_delta)
rotation_map[:, :, :] = target_rotation
ret_val = rotation_map


########################################
#### parse_query_obj ####
########################################
objects = ['minute hand', 'clock stand', 'hour hand', 'crown']
# Query: clock stand.
clock_stand = detect('clock stand')
ret_val = clock_stand


reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: back to default pose.
reset_to_default_pose()





########################## Starting episode #########################
instruction: turn the knob on the back of the clock 90 degrees
########################################
#### planner ####
########################################
objects = ['minute hand', 'clock stand', 'hour hand', 'crown']
# Query: A round clock is standing on the desk. Behind the clock, there is a cylindrical crown with a diameter of 3cm for adjusting the time, which protrudes 3cm from the back of the clock.
Please rotate the wheel on the clock to make it show 12.15..
composer("grasp the crown")
composer("rotate clockwise by 90 degrees to set the minute hand to 12")
composer("rotate counter-clockwise by 30 degrees to set the hour hand to 3")
composer("back to default pose")
# done


########################################
#### composer ####
########################################
# Query: grasp the crown.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the crown')
gripper_map = get_gripper_map('open everywhere except 1cm around the crown')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['minute hand', 'clock stand', 'hour hand', 'crown']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the crown.
affordance_map = get_empty_affordance_map()
crown = parse_query_obj('crown')
x, y, z = crown.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the crown.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the crown
crown = parse_query_obj('crown')
set_voxel_by_radius(gripper_map, crown.position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['minute hand', 'clock stand', 'hour hand', 'crown']
# Query: crown.
crown = detect('crown')
ret_val = crown


########################################
#### parse_query_obj ####
########################################
objects = ['minute hand', 'clock stand', 'hour hand', 'crown']
# Query: crown.
crown = detect('crown')
ret_val = crown


reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: rotate clockwise by 90 degrees to set the minute hand to 12.
movable = parse_query_obj('gripper')
rotation_map = get_rotation_map('rotate clockwise by 90 degrees')
execute(movable, rotation_map=rotation_map)


########################################
#### parse_query_obj ####
########################################
objects = ['minute hand', 'clock stand', 'hour hand', 'crown']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_rotation_map ####
########################################
# Query: rotate clockwise by 90 degrees.
rotation_map = get_empty_rotation_map()
curr_rotation = rotation_map[0, 0, 0]
rotation_delta = euler2quat(0, 0, np.pi / 2)
rotation_map[:, :, :] = qmult(curr_rotation, rotation_delta)
ret_val = rotation_map


reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: rotate counter-clockwise by 30 degrees to set the hour hand to 3.
movable = parse_query_obj('gripper')
rotation_map = get_rotation_map('rotate counter-clockwise by 30 degrees')
execute(movable, rotation_map=rotation_map)


########################################
#### parse_query_obj ####
########################################
objects = ['minute hand', 'clock stand', 'hour hand', 'crown']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_rotation_map ####
########################################
# Query: rotate counter-clockwise by 30 degrees.
rotation_map = get_empty_rotation_map()
curr_rotation = rotation_map[0, 0, 0]
rotation_delta = euler2quat(0, 0, -np.pi / 6)
rotation_map[:, :, :] = qmult(rotation_delta, curr_rotation)
ret_val = rotation_map


reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: back to default pose.
reset_to_default_pose()





########################## Starting episode #########################
instruction: change the clock to 12.15
########################################
#### planner ####
########################################
objects = ['minute hand', 'clock stand', 'hour hand', 'crown']
# Query: A round clock is standing on the desk. Behind the clock, there is a cylindrical crown with a diameter of 3cm for adjusting the time, which protrudes 3cm from the back of the clock.
Please rotate the wheel on the clock to make it show 12.15..
composer("grasp the crown")
composer("rotate clockwise by 90 degrees to set the minute hand to 12")
composer("rotate counter-clockwise by 30 degrees to set the hour hand to 3")
composer("back to default pose")
# done


########################################
#### composer ####
########################################
# Query: grasp the crown.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the crown')
gripper_map = get_gripper_map('open everywhere except 1cm around the crown')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['minute hand', 'clock stand', 'hour hand', 'crown']
# Query: gripper.
minute_hand = detect('minute hand')
clock_stand = detect('clock stand')
hour_hand = detect('hour hand')
crown = detect('crown')

# Assuming the gripper is one of the objects listed
gripper = detect('gripper')
ret_val = gripper





########################## Starting episode #########################
instruction: change the clock to 12.15
########################################
#### planner ####
########################################
objects = ['minute hand', 'clock stand', 'hour hand', 'crown']
# Query: A round clock is standing on the desk. Behind the clock, there is a cylindrical crown with a diameter of 3cm for adjusting the time, which protrudes 3cm from the back of the clock.
Please rotate the wheel on the clock to make it show 12.15..
composer("grasp the crown")
composer("rotate counter-clockwise by 90 degrees to set the hour hand to 12")
composer("rotate clockwise by 25 degrees to set the minute hand to 15")
composer("back to default pose")
# done


########################################
#### composer ####
########################################
# Query: grasp the crown.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the crown')
gripper_map = get_gripper_map('open everywhere except 1cm around the crown')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['minute hand', 'clock stand', 'hour hand', 'crown']
# Query: gripper.
minute_hand = detect('minute hand')
clock_stand = detect('clock stand')
hour_hand = detect('hour hand')
crown = detect('crown')

# Assuming 'gripper' is an object to be detected as well
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the crown.
affordance_map = get_empty_affordance_map()
crown = parse_query_obj('crown')
x, y, z = crown.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the crown.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the crown
crown = parse_query_obj('crown')
set_voxel_by_radius(gripper_map, crown.position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['minute hand', 'clock stand', 'hour hand', 'crown']
# Query: crown.
crown = detect('crown')
ret_val = crown


########################################
#### parse_query_obj ####
########################################
objects = ['minute hand', 'clock stand', 'hour hand', 'crown']
# Query: crown.
crown = detect('crown')
ret_val = crown


reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: rotate counter-clockwise by 90 degrees to set the hour hand to 12.
movable = parse_query_obj('gripper')
rotation_map = get_rotation_map('rotate counter-clockwise by 90 degrees')
execute(movable, rotation_map=rotation_map)


########################################
#### parse_query_obj ####
########################################
objects = ['minute hand', 'clock stand', 'hour hand', 'crown']
# Query: gripper.
minute_hand = detect('minute hand')
clock_stand = detect('clock stand')
hour_hand = detect('hour hand')
crown = detect('crown')

# Assuming 'gripper' is an object to be detected as well
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_rotation_map ####
########################################
# Query: rotate counter-clockwise by 90 degrees.
rotation_map = get_empty_rotation_map()
curr_rotation = rotation_map[0, 0, 0]
rotation_delta = euler2quat(0, 0, -np.pi / 2)
rotation_map[:, :, :] = qmult(curr_rotation, rotation_delta)
ret_val = rotation_map


reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: rotate clockwise by 25 degrees to set the minute hand to 15.
movable = parse_query_obj('gripper')
rotation_map = get_rotation_map('rotate clockwise by 25 degrees')
execute(movable, rotation_map=rotation_map)


########################################
#### parse_query_obj ####
########################################
objects = ['minute hand', 'clock stand', 'hour hand', 'crown']
# Query: gripper.
minute_hand = detect('minute hand')
clock_stand = detect('clock stand')
hour_hand = detect('hour hand')
crown = detect('crown')

# Assuming 'gripper' is an object to be detected as well
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_rotation_map ####
########################################
# Query: rotate clockwise by 25 degrees.
rotation_map = get_empty_rotation_map()
curr_rotation = rotation_map[0, 0, 0]
rotation_delta = euler2quat(0, 0, np.pi / 180 * 25)
rotation_map[:, :, :] = qmult(curr_rotation, rotation_delta)
ret_val = rotation_map


reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: back to default pose.
reset_to_default_pose()





########################## Starting episode #########################
instruction: put 2 books on bookshelf
########################################
#### planner ####
########################################
objects = ['bookshelf', 'book']
# Query: A bookshelf is on the table, and on top of it, three books are stacked with their wide sides touching the top surface of the bookshelf. You need to pick up the book on the very top. Except for the thickness, all edges of the book are longer than the gripper..
composer("move to the top of the bookshelf")
composer("move to the center of the book on the very top")
composer("grasp the book on the very top")
composer("back to default pose")
# done


########################################
#### composer ####
########################################
# Query: move to the top of the bookshelf.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point 10cm above the bookshelf')
execute(movable, affordance_map=affordance_map)


########################################
#### parse_query_obj ####
########################################
objects = ['bookshelf', 'book']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point 10cm above the bookshelf.
affordance_map = get_empty_affordance_map()
bookshelf = parse_query_obj('bookshelf')
(min_x, min_y, min_z), (max_x, max_y, max_z) = bookshelf.aabb
center_x, center_y, center_z = bookshelf.position
# 10cm above so we add to z-axis
x = center_x
y = center_y
z = max_z + cm2index(10, 'z')
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### parse_query_obj ####
########################################
objects = ['bookshelf', 'book']
# Query: bookshelf.
bookshelf = detect('bookshelf')
ret_val = bookshelf


reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: move to the center of the book on the very top.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the book on the very top')
execute(movable, affordance_map=affordance_map)


########################################
#### parse_query_obj ####
########################################
objects = ['bookshelf', 'book']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the book on the very top.
affordance_map = get_empty_affordance_map()
book_on_top = parse_query_obj('book on the very top')
x, y, z = book_on_top.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### parse_query_obj ####
########################################
objects = ['bookshelf', 'book']
# Query: book on the very top.
top_book = None
books = []
for obj in ['book']:
    book = detect(obj)
    books.append(book)
if len(books) > 0:
    books.sort(key=lambda book: book.position[2], reverse=True)
    top_book = books[0]
ret_val = top_book


reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: grasp the book on the very top.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the book on the very top')
gripper_map = get_gripper_map('open everywhere except 1cm around the book on the very top')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['bookshelf', 'book']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the book on the very top.
affordance_map = get_empty_affordance_map()
book_on_top = parse_query_obj('book on the very top')
x, y, z = book_on_top.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the book on the very top.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the book on the very top
book = parse_query_obj('book on the very top')
set_voxel_by_radius(gripper_map, book.position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['bookshelf', 'book']
# Query: book on the very top.
top_book = None
books = []
for obj in ['book']:
    book = detect(obj)
    books.append(book)
if len(books) > 0:
    books.sort(key=lambda book: book.position[2], reverse=True)
    top_book = books[0]
ret_val = top_book


########################################
#### parse_query_obj ####
########################################
objects = ['bookshelf', 'book']
# Query: book on the very top.
top_book = None
books = []
for obj in ['book']:
    book = detect(obj)
    books.append(book)
if len(books) > 0:
    books.sort(key=lambda book: book.position[2], reverse=True)
    top_book = books[0]
ret_val = top_book


reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: back to default pose.
reset_to_default_pose()





########################## Starting episode #########################
instruction: stack 1 books up on the top shelf



########################## Starting episode #########################
instruction: put 1 books on bookshelf
########################################
#### planner ####
########################################
objects = ['bookshelf', 'book']
# Query: put 1 books on bookshelf.
composer("move to the side of the book while staying at least 10cm from the bookshelf")
composer("grasp the book")
composer("back to default pose")
composer("move in front of the bookshelf")
composer("move ee forward 10cm")
# done


########################################
#### composer ####
########################################
# Query: move to the side of the book while staying at least 10cm from the bookshelf.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point on the side of the book')
avoidance_map = get_avoidance_map('10cm from the bookshelf')
execute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)


########################################
#### parse_query_obj ####
########################################
objects = ['bookshelf', 'book']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point on the side of the book.
affordance_map = get_empty_affordance_map()
book = parse_query_obj('book')
(min_x, min_y, min_z), (max_x, max_y, max_z) = book.aabb
center_x, center_y, center_z = book.position
# side so y = center_y
x = center_x
y = center_y
z = center_z
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_avoidance_map ####
########################################
# Query: 10cm from the bookshelf.
avoidance_map = get_empty_avoidance_map()
bookshelf = parse_query_obj('bookshelf')
set_voxel_by_radius(avoidance_map, bookshelf.position, radius_cm=10, value=1)
ret_val = avoidance_map


########################################
#### parse_query_obj ####
########################################
objects = ['bookshelf', 'book']
# Query: book.
book = detect('book')
ret_val = book


########################################
#### parse_query_obj ####
########################################
objects = ['bookshelf', 'book']
# Query: bookshelf.
bookshelf = detect('bookshelf')
ret_val = bookshelf


reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: grasp the book.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the book')
gripper_map = get_gripper_map('open everywhere except 1cm around the book')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['bookshelf', 'book']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the book.
affordance_map = get_empty_affordance_map()
book = parse_query_obj('book')
x, y, z = book.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the book.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the book
book = parse_query_obj('book')
set_voxel_by_radius(gripper_map, book.position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['bookshelf', 'book']
# Query: book.
book = detect('book')
ret_val = book


########################################
#### parse_query_obj ####
########################################
objects = ['bookshelf', 'book']
# Query: book.
book = detect('book')
ret_val = book


reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: back to default pose.
reset_to_default_pose()


########################################
#### composer ####
########################################
# Query: move in front of the bookshelf.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point in front of the bookshelf')
execute(movable, affordance_map=affordance_map)


########################################
#### parse_query_obj ####
########################################
objects = ['bookshelf', 'book']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point in front of the bookshelf.
affordance_map = get_empty_affordance_map()
bookshelf = parse_query_obj('bookshelf')
(min_x, min_y, min_z), (max_x, max_y, max_z) = bookshelf.aabb
center_x, center_y, center_z = bookshelf.position
# in front of so we add to x-axis
x = max_x + cm2index(10, 'x')
y = center_y
z = center_z
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### parse_query_obj ####
########################################
objects = ['bookshelf', 'book']
# Query: bookshelf.
bookshelf = detect('bookshelf')
ret_val = bookshelf


reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: move ee forward 10cm.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map(f'a point 10cm in front of {movable.position}')
execute(movable, affordance_map)


########################################
#### parse_query_obj ####
########################################
objects = ['bookshelf', 'book']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point 10cm in front of [64 58 59].
affordance_map = get_empty_affordance_map()
# 10cm in front of so we add to x-axis
x = 64 + cm2index(10, 'x')
y = 58
z = 59
affordance_map[x, y, z] = 1
ret_val = affordance_map


reward: 0.0
##############################





########################## Starting episode #########################
instruction: stack 2 books up on the top shelf
########################################
#### planner ####
########################################
objects = ['bookshelf', 'book']
# Query: stack 2 books up on the top shelf.
composer("move to the right side of the book while staying at least 10cm from the bookshelf")
composer("grasp the book")
composer("back to default pose")
composer("go near the bookshelf")
composer("move ee forward 10cm")
# done


########################################
#### composer ####
########################################
# Query: move to the right side of the book while staying at least 10cm from the bookshelf.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point on the right side of the book')
avoidance_map = get_avoidance_map('10cm from the bookshelf')
execute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)


########################################
#### parse_query_obj ####
########################################
objects = ['bookshelf', 'book']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point on the right side of the book.
affordance_map = get_empty_affordance_map()
book = parse_query_obj('book')
(min_x, min_y, min_z), (max_x, max_y, max_z) = book.aabb
center_x, center_y, center_z = book.position
# right side so y = max_y
x = center_x
y = max_y
z = center_z
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_avoidance_map ####
########################################
# Query: 10cm from the bookshelf.
avoidance_map = get_empty_avoidance_map()
bookshelf = parse_query_obj('bookshelf')
set_voxel_by_radius(avoidance_map, bookshelf.position, radius_cm=10, value=1)
ret_val = avoidance_map


########################################
#### parse_query_obj ####
########################################
objects = ['bookshelf', 'book']
# Query: book.
book = detect('book')
ret_val = book


########################################
#### parse_query_obj ####
########################################
objects = ['bookshelf', 'book']
# Query: bookshelf.
bookshelf = detect('bookshelf')
ret_val = bookshelf


reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: grasp the book.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the book')
gripper_map = get_gripper_map('open everywhere except 1cm around the book')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['bookshelf', 'book']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the book.
affordance_map = get_empty_affordance_map()
book = parse_query_obj('book')
x, y, z = book.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the book.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the book
book = parse_query_obj('book')
set_voxel_by_radius(gripper_map, book.position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['bookshelf', 'book']
# Query: book.
book = detect('book')
ret_val = book


########################################
#### parse_query_obj ####
########################################
objects = ['bookshelf', 'book']
# Query: book.
book = detect('book')
ret_val = book


reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: back to default pose.
reset_to_default_pose()


########################################
#### composer ####
########################################
# Query: go near the bookshelf.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point 10cm in front of the bookshelf')
execute(movable, affordance_map=affordance_map)


########################################
#### parse_query_obj ####
########################################
objects = ['bookshelf', 'book']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point 10cm in front of the bookshelf.
affordance_map = get_empty_affordance_map()
bookshelf = parse_query_obj('bookshelf')
(min_x, min_y, min_z), (max_x, max_y, max_z) = bookshelf.aabb
center_x, center_y, center_z = bookshelf.position
# 10cm in front of so we add to x-axis
x = max_x + cm2index(10, 'x')
y = center_y
z = center_z
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### parse_query_obj ####
########################################
objects = ['bookshelf', 'book']
# Query: bookshelf.
bookshelf = detect('bookshelf')
ret_val = bookshelf


reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: move ee forward 10cm.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map(f'a point 10cm in front of {movable.position}')
execute(movable, affordance_map)


########################################
#### parse_query_obj ####
########################################
objects = ['bookshelf', 'book']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point 10cm in front of [58 54 67].
affordance_map = get_empty_affordance_map()
# 10cm in front of so we add to x-axis
x = 58 + cm2index(10, 'x')
y = 54
z = 67
affordance_map[x, y, z] = 1
ret_val = affordance_map


reward: 0.0
##############################





########################## Starting episode #########################
instruction: pick up 3 books and place them on the top shelf



########################## Starting episode #########################
instruction: put 1 books on bookshelf
