



########################## Starting episode #########################
instruction: slide the block towards the green target
########################################
#### planner ####
########################################
objects = ['block', 'target']
# Query: slide the block towards the green target.
composer("push the block towards the green target")


########################################
#### composer ####
########################################
# Query: push the block towards the green target.
movable = parse_query_obj('block')
affordance_map = get_affordance_map('a point 10cm in front of the green target')
execute(movable, affordance_map=affordance_map)


########################################
#### parse_query_obj ####
########################################
objects = ['block', 'target']
# Query: block.
block = detect('block')
ret_val = block


########################################
#### get_affordance_map ####
########################################
# Query: a point 10cm in front of the green target.
affordance_map = get_empty_affordance_map()
green_target = parse_query_obj('green target')
(min_x, min_y, min_z), (max_x, max_y, max_z) = green_target.aabb
center_x, center_y, center_z = green_target.position
# 10cm in front of so we add to x-axis
x = max_x + cm2index(10, 'x')
y = center_y
z = center_z
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### parse_query_obj ####
########################################
objects = ['block', 'target']
# Query: green target.
green_target = detect('target')
ret_val = green_target






########################## Starting episode #########################
instruction: cover the target with the block by pushing the block in its direction
########################################
#### planner ####
########################################
objects = ['block', 'target']
# Query: cover the target with the block by pushing the block in its direction.
composer("grasp the block")
composer("back to default pose")
composer("move to 10cm in front of the target")
composer("push the block towards the target")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the block.
movable = parse_query_obj('block')
affordance_map = get_affordance_map('a point at the center of the block')
gripper_map = get_gripper_map('open everywhere except 1cm around the block')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['block', 'target']
# Query: block.
block = detect('block')
ret_val = block


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the block.
affordance_map = get_empty_affordance_map()
block = parse_query_obj('block')
x, y, z = block.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the block.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the block
block = parse_query_obj('block')
set_voxel_by_radius(gripper_map, block.position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['block', 'target']
# Query: block.
block = detect('block')
ret_val = block


########################################
#### parse_query_obj ####
########################################
objects = ['block', 'target']
# Query: block.
block = detect('block')
ret_val = block


########################################
#### composer ####
########################################
# Query: back to default pose.
reset_to_default_pose()


########################################
#### composer ####
########################################
# Query: move to 10cm in front of the target.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map(f'a point 10cm in front of {movable.position}')
execute(movable, affordance_map)


########################################
#### parse_query_obj ####
########################################
objects = ['block', 'target']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point 10cm in front of [52 49 71].
affordance_map = get_empty_affordance_map()
# 10cm in front of so we add to x-axis
x = 52 + cm2index(10, 'x')
y = 49
z = 71
affordance_map[x, y, z] = 1
ret_val = affordance_map


Reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: push the block towards the target.
movable = parse_query_obj('block')
affordance_map = get_affordance_map('a point 10cm in front of the block')
execute(movable, affordance_map=affordance_map)


########################################
#### parse_query_obj ####
########################################
objects = ['block', 'target']
# Query: block.
block = detect('block')
ret_val = block


########################################
#### get_affordance_map ####
########################################
# Query: a point 10cm in front of the block.
affordance_map = get_empty_affordance_map()
block = parse_query_obj('block')
(min_x, min_y, min_z), (max_x, max_y, max_z) = block.aabb
center_x, center_y, center_z = block.position
# 10cm in front of so we add to x-axis
x = max_x + cm2index(10, 'x')
y = center_y
z = center_z
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### parse_query_obj ####
########################################
objects = ['block', 'target']
# Query: block.
block = detect('block')
ret_val = block


########################################
#### composer ####
########################################
# Query: back to default pose.
reset_to_default_pose()






########################## Starting episode #########################
instruction: slide the block to target
########################################
#### planner ####
########################################
objects = ['block', 'target']
# Query: slide the block to target.
composer("push the block towards the target")


########################################
#### composer ####
########################################
# Query: push the block towards the target.
movable = parse_query_obj('block')
affordance_map = get_affordance_map('a point 10cm in front of the block')
execute(movable, affordance_map=affordance_map)


########################################
#### parse_query_obj ####
########################################
objects = ['block', 'target']
# Query: block.
block = detect('block')
ret_val = block


########################################
#### get_affordance_map ####
########################################
# Query: a point 10cm in front of the block.
affordance_map = get_empty_affordance_map()
block = parse_query_obj('block')
(min_x, min_y, min_z), (max_x, max_y, max_z) = block.aabb
center_x, center_y, center_z = block.position
# 10cm in front of so we add to x-axis
x = max_x + cm2index(10, 'x')
y = center_y
z = center_z
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### parse_query_obj ####
########################################
objects = ['block', 'target']
# Query: block.
block = detect('block')
ret_val = block






########################## Starting episode #########################
instruction: slide the block towards the green target
########################################
#### planner ####
########################################
objects = ['block', 'target']
# Query: slide the block towards the green target.
composer("push the block towards the green target")


########################################
#### composer ####
########################################
# Query: push the block towards the green target.
movable = parse_query_obj('block')
affordance_map = get_affordance_map('a point 10cm in front of the green target')
execute(movable, affordance_map=affordance_map)


########################################
#### parse_query_obj ####
########################################
objects = ['block', 'target']
# Query: block.
block = detect('block')
ret_val = block


########################################
#### get_affordance_map ####
########################################
# Query: a point 10cm in front of the green target.
affordance_map = get_empty_affordance_map()
green_target = parse_query_obj('green target')
(min_x, min_y, min_z), (max_x, max_y, max_z) = green_target.aabb
center_x, center_y, center_z = green_target.position
# 10cm in front of so we add to x-axis
x = max_x + cm2index(10, 'x')
y = center_y
z = center_z
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### parse_query_obj ####
########################################
objects = ['block', 'target']
# Query: green target.
green_target = detect('target')
ret_val = green_target






########################## Starting episode #########################
instruction: slide the block onto the target
########################################
#### planner ####
########################################
objects = ['block', 'target']
# Query: slide the block onto the target.
composer("push the block towards the target")


########################################
#### composer ####
########################################
# Query: push the block towards the target.
movable = parse_query_obj('block')
affordance_map = get_affordance_map('a point 10cm in front of the block')
execute(movable, affordance_map=affordance_map)


########################################
#### parse_query_obj ####
########################################
objects = ['block', 'target']
# Query: block.
block = detect('block')
ret_val = block


########################################
#### get_affordance_map ####
########################################
# Query: a point 10cm in front of the block.
affordance_map = get_empty_affordance_map()
block = parse_query_obj('block')
(min_x, min_y, min_z), (max_x, max_y, max_z) = block.aabb
center_x, center_y, center_z = block.position
# 10cm in front of so we add to x-axis
x = max_x + cm2index(10, 'x')
y = center_y
z = center_z
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### parse_query_obj ####
########################################
objects = ['block', 'target']
# Query: block.
block = detect('block')
ret_val = block






########################## Starting episode #########################
instruction: cover the target with the block by pushing the block in its direction
########################################
#### planner ####
########################################
objects = ['block', 'target']
# Query: cover the target with the block by pushing the block in its direction.
composer("grasp the block")
composer("back to default pose")
composer("move to 10cm in front of the target")
composer("push the block towards the target")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the block.
movable = parse_query_obj('block')
affordance_map = get_affordance_map('a point at the center of the block')
gripper_map = get_gripper_map('open everywhere except 1cm around the block')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['block', 'target']
# Query: block.
block = detect('block')
ret_val = block


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the block.
affordance_map = get_empty_affordance_map()
block = parse_query_obj('block')
x, y, z = block.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the block.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the block
block = parse_query_obj('block')
set_voxel_by_radius(gripper_map, block.position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['block', 'target']
# Query: block.
block = detect('block')
ret_val = block


########################################
#### parse_query_obj ####
########################################
objects = ['block', 'target']
# Query: block.
block = detect('block')
ret_val = block


########################################
#### composer ####
########################################
# Query: back to default pose.
reset_to_default_pose()


########################################
#### composer ####
########################################
# Query: move to 10cm in front of the target.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map(f'a point 10cm in front of {movable.position}')
execute(movable, affordance_map)


########################################
#### parse_query_obj ####
########################################
objects = ['block', 'target']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point 10cm in front of [52 49 71].
affordance_map = get_empty_affordance_map()
# 10cm in front of so we add to x-axis
x = 52 + cm2index(10, 'x')
y = 49
z = 71
affordance_map[x, y, z] = 1
ret_val = affordance_map


Reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: push the block towards the target.
movable = parse_query_obj('block')
affordance_map = get_affordance_map('a point 10cm in front of the block')
execute(movable, affordance_map=affordance_map)


########################################
#### parse_query_obj ####
########################################
objects = ['block', 'target']
# Query: block.
block = detect('block')
ret_val = block


########################################
#### get_affordance_map ####
########################################
# Query: a point 10cm in front of the block.
affordance_map = get_empty_affordance_map()
block = parse_query_obj('block')
(min_x, min_y, min_z), (max_x, max_y, max_z) = block.aabb
center_x, center_y, center_z = block.position
# 10cm in front of so we add to x-axis
x = max_x + cm2index(10, 'x')
y = center_y
z = center_z
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### parse_query_obj ####
########################################
objects = ['block', 'target']
# Query: block.
block = detect('block')
ret_val = block


########################################
#### composer ####
########################################
# Query: back to default pose.
reset_to_default_pose()






########################## Starting episode #########################
instruction: slide the block towards the green target
########################################
#### planner ####
########################################
objects = ['block', 'target']
# Query: slide the block towards the green target.
composer("push the block towards the green target")


########################################
#### composer ####
########################################
# Query: push the block towards the green target.
movable = parse_query_obj('block')
affordance_map = get_affordance_map('a point 10cm in front of the green target')
execute(movable, affordance_map=affordance_map)


########################################
#### parse_query_obj ####
########################################
objects = ['block', 'target']
# Query: block.
block = detect('block')
ret_val = block


########################################
#### get_affordance_map ####
########################################
# Query: a point 10cm in front of the green target.
affordance_map = get_empty_affordance_map()
green_target = parse_query_obj('green target')
(min_x, min_y, min_z), (max_x, max_y, max_z) = green_target.aabb
center_x, center_y, center_z = green_target.position
# 10cm in front of so we add to x-axis
x = max_x + cm2index(10, 'x')
y = center_y
z = center_z
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### parse_query_obj ####
########################################
objects = ['block', 'target']
# Query: green target.
green_target = detect('target')
ret_val = green_target






########################## Starting episode #########################
instruction: cover the target with the block by pushing the block in its direction
########################################
#### planner ####
########################################
objects = ['block', 'target']
# Query: cover the target with the block by pushing the block in its direction.
composer("grasp the block")
composer("back to default pose")
composer("move to 10cm in front of the target")
composer("push the block towards the target")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the block.
movable = parse_query_obj('block')
affordance_map = get_affordance_map('a point at the center of the block')
gripper_map = get_gripper_map('open everywhere except 1cm around the block')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['block', 'target']
# Query: block.
block = detect('block')
ret_val = block


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the block.
affordance_map = get_empty_affordance_map()
block = parse_query_obj('block')
x, y, z = block.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the block.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the block
block = parse_query_obj('block')
set_voxel_by_radius(gripper_map, block.position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['block', 'target']
# Query: block.
block = detect('block')
ret_val = block


########################################
#### parse_query_obj ####
########################################
objects = ['block', 'target']
# Query: block.
block = detect('block')
ret_val = block


########################################
#### composer ####
########################################
# Query: back to default pose.
reset_to_default_pose()


########################################
#### composer ####
########################################
# Query: move to 10cm in front of the target.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map(f'a point 10cm in front of {movable.position}')
execute(movable, affordance_map)


########################################
#### parse_query_obj ####
########################################
objects = ['block', 'target']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point 10cm in front of [52 49 71].
affordance_map = get_empty_affordance_map()
# 10cm in front of so we add to x-axis
x = 52 + cm2index(10, 'x')
y = 49
z = 71
affordance_map[x, y, z] = 1
ret_val = affordance_map


Reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: push the block towards the target.
movable = parse_query_obj('block')
affordance_map = get_affordance_map('a point 10cm in front of the block')
execute(movable, affordance_map=affordance_map)


########################################
#### parse_query_obj ####
########################################
objects = ['block', 'target']
# Query: block.
block = detect('block')
ret_val = block


########################################
#### get_affordance_map ####
########################################
# Query: a point 10cm in front of the block.
affordance_map = get_empty_affordance_map()
block = parse_query_obj('block')
(min_x, min_y, min_z), (max_x, max_y, max_z) = block.aabb
center_x, center_y, center_z = block.position
# 10cm in front of so we add to x-axis
x = max_x + cm2index(10, 'x')
y = center_y
z = center_z
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### parse_query_obj ####
########################################
objects = ['block', 'target']
# Query: block.
block = detect('block')
ret_val = block


########################################
#### composer ####
########################################
# Query: back to default pose.
reset_to_default_pose()






########################## Starting episode #########################
instruction: slide the block to target
########################################
#### planner ####
########################################
objects = ['block', 'target']
# Query: slide the block to target.
composer("push the block towards the target")


########################################
#### composer ####
########################################
# Query: push the block towards the target.
movable = parse_query_obj('block')
affordance_map = get_affordance_map('a point 10cm in front of the block')
execute(movable, affordance_map=affordance_map)


########################################
#### parse_query_obj ####
########################################
objects = ['block', 'target']
# Query: block.
block = detect('block')
ret_val = block


########################################
#### get_affordance_map ####
########################################
# Query: a point 10cm in front of the block.
affordance_map = get_empty_affordance_map()
block = parse_query_obj('block')
(min_x, min_y, min_z), (max_x, max_y, max_z) = block.aabb
center_x, center_y, center_z = block.position
# 10cm in front of so we add to x-axis
x = max_x + cm2index(10, 'x')
y = center_y
z = center_z
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### parse_query_obj ####
########################################
objects = ['block', 'target']
# Query: block.
block = detect('block')
ret_val = block






########################## Starting episode #########################
instruction: slide the block onto the target
########################################
#### planner ####
########################################
objects = ['block', 'target']
# Query: slide the block onto the target.
composer("push the block towards the target")


########################################
#### composer ####
########################################
# Query: push the block towards the target.
movable = parse_query_obj('block')
affordance_map = get_affordance_map('a point 10cm in front of the block')
execute(movable, affordance_map=affordance_map)


########################################
#### parse_query_obj ####
########################################
objects = ['block', 'target']
# Query: block.
block = detect('block')
ret_val = block


########################################
#### get_affordance_map ####
########################################
# Query: a point 10cm in front of the block.
affordance_map = get_empty_affordance_map()
block = parse_query_obj('block')
(min_x, min_y, min_z), (max_x, max_y, max_z) = block.aabb
center_x, center_y, center_z = block.position
# 10cm in front of so we add to x-axis
x = max_x + cm2index(10, 'x')
y = center_y
z = center_z
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### parse_query_obj ####
########################################
objects = ['block', 'target']
# Query: block.
block = detect('block')
ret_val = block






########################## Starting episode #########################
instruction: leave the pan open
########################################
#### planner ####
########################################
objects = ['saucepan', 'saucepan_lid']
# Query: leave the pan open.
composer("open the saucepan lid")


########################################
#### composer ####
########################################
# Query: open the saucepan lid.
movable = parse_query_obj('saucepan lid')
gripper_map = get_gripper_map('open everywhere')
execute(movable, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['saucepan', 'saucepan_lid']
# Query: saucepan lid.
saucepan_lid = detect('saucepan_lid')
ret_val = saucepan_lid


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
ret_val = gripper_map






########################## Starting episode #########################
instruction: grip the saucepan's lid and remove it from the pan
########################################
#### planner ####
########################################
objects = ['saucepan', 'saucepan_lid']
# Query: grip the saucepan's lid and remove it from the pan.
composer("grasp the saucepan lid")
composer("back to default pose")
composer("move away from the saucepan lid by 25cm")
composer("open gripper")


########################################
#### composer ####
########################################
# Query: grasp the saucepan lid.
movable = parse_query_obj('saucepan lid')
affordance_map = get_affordance_map('a point at the center of the saucepan lid')
gripper_map = get_gripper_map('open everywhere except 1cm around the saucepan lid')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['saucepan', 'saucepan_lid']
# Query: saucepan lid.
saucepan_lid = detect('saucepan_lid')
ret_val = saucepan_lid


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the saucepan lid.
affordance_map = get_empty_affordance_map()
saucepan_lid = parse_query_obj('saucepan lid')
x, y, z = saucepan_lid.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the saucepan lid.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the saucepan lid
saucepan_lid = parse_query_obj('saucepan lid')
set_voxel_by_radius(gripper_map, saucepan_lid.position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['saucepan', 'saucepan_lid']
# Query: saucepan lid.
saucepan_lid = detect('saucepan_lid')
ret_val = saucepan_lid


########################################
#### parse_query_obj ####
########################################
objects = ['saucepan', 'saucepan_lid']
# Query: saucepan lid.
saucepan_lid = detect('saucepan_lid')
ret_val = saucepan_lid


########################################
#### composer ####
########################################
# Query: back to default pose.
reset_to_default_pose()


########################################
#### composer ####
########################################
# Query: move away from the saucepan lid by 25cm.
movable = parse_query_obj('gripper')
avoidance_map = get_avoidance_map('25cm from the saucepan lid')
execute(movable, avoidance_map=avoidance_map)


########################################
#### parse_query_obj ####
########################################
objects = ['saucepan', 'saucepan_lid']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_avoidance_map ####
########################################
# Query: 25cm from the saucepan lid.
avoidance_map = get_empty_avoidance_map()
saucepan_lid = parse_query_obj('saucepan lid')
set_voxel_by_radius(avoidance_map, saucepan_lid.position, radius_cm=25, value=1)
ret_val = avoidance_map


Reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: open gripper.
movable = parse_query_obj('gripper')
gripper_map = get_gripper_map('open everywhere')
execute(movable, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['saucepan', 'saucepan_lid']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
ret_val = gripper_map


Reward: 0.0
##############################






########################## Starting episode #########################
instruction: take lid off the saucepan
########################################
#### planner ####
########################################
objects = ['saucepan', 'saucepan_lid']
# Query: take lid off the saucepan.
composer("grasp the saucepan_lid")
composer("back to default pose")
composer("move away from the saucepan_lid by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the saucepan_lid.
movable = parse_query_obj('saucepan_lid')
affordance_map = get_affordance_map('a point at the center of saucepan_lid')
gripper_map = get_gripper_map('open everywhere except 1cm around the saucepan_lid')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['saucepan', 'saucepan_lid']
# Query: saucepan_lid.
saucepan_lid = detect('saucepan_lid')
ret_val = saucepan_lid


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of saucepan_lid.
affordance_map = get_empty_affordance_map()
saucepan_lid = parse_query_obj('saucepan lid')
x, y, z = saucepan_lid.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the saucepan_lid.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the saucepan_lid
saucepan_lid = parse_query_obj('saucepan lid')
set_voxel_by_radius(gripper_map, saucepan_lid.position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['saucepan', 'saucepan_lid']
# Query: saucepan lid.
saucepan_lid = detect('saucepan_lid')
ret_val = saucepan_lid


########################################
#### parse_query_obj ####
########################################
objects = ['saucepan', 'saucepan_lid']
# Query: saucepan lid.
saucepan_lid = detect('saucepan_lid')
ret_val = saucepan_lid


########################################
#### composer ####
########################################
# Query: back to default pose.
reset_to_default_pose()


########################################
#### composer ####
########################################
# Query: move away from the saucepan_lid by 25cm.
movable = parse_query_obj('gripper')
avoidance_map = get_avoidance_map('25cm from the saucepan_lid')
execute(movable, avoidance_map=avoidance_map)


########################################
#### parse_query_obj ####
########################################
objects = ['saucepan', 'saucepan_lid']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_avoidance_map ####
########################################
# Query: 25cm from the saucepan_lid.
avoidance_map = get_empty_avoidance_map()
saucepan_lid = parse_query_obj('saucepan_lid')
set_voxel_by_radius(avoidance_map, saucepan_lid.position, radius_cm=25, value=1)
ret_val = avoidance_map


Reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: open gripper.
movable = parse_query_obj('gripper')
gripper_map = get_gripper_map('open everywhere')
execute(movable, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['saucepan', 'saucepan_lid']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
ret_val = gripper_map


Reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: back to default pose.
reset_to_default_pose()






########################## Starting episode #########################
instruction: leave the pan open
########################################
#### planner ####
########################################
objects = ['saucepan', 'saucepan_lid']
# Query: leave the pan open.
composer("open the saucepan lid")


########################################
#### composer ####
########################################
# Query: open the saucepan lid.
movable = parse_query_obj('saucepan lid')
gripper_map = get_gripper_map('open everywhere')
execute(movable, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['saucepan', 'saucepan_lid']
# Query: saucepan lid.
saucepan_lid = detect('saucepan_lid')
ret_val = saucepan_lid


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
ret_val = gripper_map






########################## Starting episode #########################
instruction: uncover the saucepan
########################################
#### planner ####
########################################
objects = ['saucepan', 'saucepan_lid']
# Query: uncover the saucepan.
composer("grasp the saucepan lid")
composer("back to default pose")
composer("move to 10cm on top of the saucepan")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the saucepan lid.
movable = parse_query_obj('saucepan lid')
affordance_map = get_affordance_map('a point at the center of the saucepan lid')
gripper_map = get_gripper_map('open everywhere except 1cm around the saucepan lid')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['saucepan', 'saucepan_lid']
# Query: saucepan lid.
saucepan_lid = detect('saucepan_lid')
ret_val = saucepan_lid


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the saucepan lid.
affordance_map = get_empty_affordance_map()
saucepan_lid = parse_query_obj('saucepan lid')
x, y, z = saucepan_lid.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the saucepan lid.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the saucepan lid
saucepan_lid = parse_query_obj('saucepan lid')
set_voxel_by_radius(gripper_map, saucepan_lid.position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['saucepan', 'saucepan_lid']
# Query: saucepan lid.
saucepan_lid = detect('saucepan_lid')
ret_val = saucepan_lid


########################################
#### parse_query_obj ####
########################################
objects = ['saucepan', 'saucepan_lid']
# Query: saucepan lid.
saucepan_lid = detect('saucepan_lid')
ret_val = saucepan_lid


########################################
#### composer ####
########################################
# Query: back to default pose.
reset_to_default_pose()


########################################
#### composer ####
########################################
# Query: move to 10cm on top of the saucepan.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point 10cm above the saucepan')
execute(movable, affordance_map=affordance_map)


########################################
#### parse_query_obj ####
########################################
objects = ['saucepan', 'saucepan_lid']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point 10cm above the saucepan.
affordance_map = get_empty_affordance_map()
saucepan = parse_query_obj('saucepan')
(min_x, min_y, min_z), (max_x, max_y, max_z) = saucepan.aabb
center_x, center_y, center_z = saucepan.position
# 10cm above so we add to z-axis
x = center_x
y = center_y
z = max_z + cm2index(10, 'z')
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### parse_query_obj ####
########################################
objects = ['saucepan', 'saucepan_lid']
# Query: saucepan.
saucepan = detect('saucepan')
ret_val = saucepan


Reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: open gripper.
movable = parse_query_obj('gripper')
gripper_map = get_gripper_map('open everywhere')
execute(movable, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['saucepan', 'saucepan_lid']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
ret_val = gripper_map


Reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: back to default pose.
reset_to_default_pose()






########################## Starting episode #########################
instruction: using the handle, lift the lid off of the pan
########################################
#### planner ####
########################################
objects = ['saucepan', 'saucepan_lid']
# Query: using the handle, lift the lid off of the pan.
composer("grasp the saucepan_lid handle")
composer("back to default pose")
composer("move up by 10cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the saucepan_lid handle.
movable = parse_query_obj('saucepan_lid handle')
affordance_map = get_affordance_map('a point at the center of saucepan_lid handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the saucepan_lid handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['saucepan', 'saucepan_lid']
# Query: saucepan_lid handle.
saucepan_lid_handle = detect('saucepan_lid')
ret_val = saucepan_lid_handle


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of saucepan_lid handle.
affordance_map = get_empty_affordance_map()
saucepan_lid_handle = parse_query_obj('saucepan lid handle')
x, y, z = saucepan_lid_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the saucepan_lid handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the saucepan_lid handle
saucepan_lid = parse_query_obj('saucepan lid')
handle = saucepan_lid.children[0]
set_voxel_by_radius(gripper_map, handle.position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['saucepan', 'saucepan_lid']
# Query: saucepan lid handle.
saucepan_lid_handle = detect('saucepan_lid')
ret_val = saucepan_lid_handle


########################################
#### parse_query_obj ####
########################################
objects = ['saucepan', 'saucepan_lid']
# Query: saucepan lid.
saucepan_lid = detect('saucepan_lid')
ret_val = saucepan_lid


*** Error: 'children'




########################## Starting episode #########################
instruction: uncover the saucepan
########################################
#### planner ####
########################################
objects = ['saucepan', 'saucepan_lid']
# Query: uncover the saucepan.
composer("grasp the saucepan lid")
composer("back to default pose")
composer("move to 10cm on top of the saucepan")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the saucepan lid.
movable = parse_query_obj('saucepan lid')
affordance_map = get_affordance_map('a point at the center of the saucepan lid')
gripper_map = get_gripper_map('open everywhere except 1cm around the saucepan lid')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['saucepan', 'saucepan_lid']
# Query: saucepan lid.
saucepan_lid = detect('saucepan_lid')
ret_val = saucepan_lid


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the saucepan lid.
affordance_map = get_empty_affordance_map()
saucepan_lid = parse_query_obj('saucepan lid')
x, y, z = saucepan_lid.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the saucepan lid.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the saucepan lid
saucepan_lid = parse_query_obj('saucepan lid')
set_voxel_by_radius(gripper_map, saucepan_lid.position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['saucepan', 'saucepan_lid']
# Query: saucepan lid.
saucepan_lid = detect('saucepan_lid')
ret_val = saucepan_lid


########################################
#### parse_query_obj ####
########################################
objects = ['saucepan', 'saucepan_lid']
# Query: saucepan lid.
saucepan_lid = detect('saucepan_lid')
ret_val = saucepan_lid


########################################
#### composer ####
########################################
# Query: back to default pose.
reset_to_default_pose()


########################################
#### composer ####
########################################
# Query: move to 10cm on top of the saucepan.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point 10cm above the saucepan')
execute(movable, affordance_map=affordance_map)


########################################
#### parse_query_obj ####
########################################
objects = ['saucepan', 'saucepan_lid']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point 10cm above the saucepan.
affordance_map = get_empty_affordance_map()
saucepan = parse_query_obj('saucepan')
(min_x, min_y, min_z), (max_x, max_y, max_z) = saucepan.aabb
center_x, center_y, center_z = saucepan.position
# 10cm above so we add to z-axis
x = center_x
y = center_y
z = max_z + cm2index(10, 'z')
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### parse_query_obj ####
########################################
objects = ['saucepan', 'saucepan_lid']
# Query: saucepan.
saucepan = detect('saucepan')
ret_val = saucepan


Reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: open gripper.
movable = parse_query_obj('gripper')
gripper_map = get_gripper_map('open everywhere')
execute(movable, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['saucepan', 'saucepan_lid']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
ret_val = gripper_map


Reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: back to default pose.
reset_to_default_pose()






########################## Starting episode #########################
instruction: uncover the saucepan
########################################
#### planner ####
########################################
objects = ['saucepan', 'saucepan_lid']
# Query: uncover the saucepan.
composer("grasp the saucepan lid")
composer("back to default pose")
composer("move to 10cm on top of the saucepan")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the saucepan lid.
movable = parse_query_obj('saucepan lid')
affordance_map = get_affordance_map('a point at the center of the saucepan lid')
gripper_map = get_gripper_map('open everywhere except 1cm around the saucepan lid')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['saucepan', 'saucepan_lid']
# Query: saucepan lid.
saucepan_lid = detect('saucepan_lid')
ret_val = saucepan_lid


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the saucepan lid.
affordance_map = get_empty_affordance_map()
saucepan_lid = parse_query_obj('saucepan lid')
x, y, z = saucepan_lid.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the saucepan lid.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the saucepan lid
saucepan_lid = parse_query_obj('saucepan lid')
set_voxel_by_radius(gripper_map, saucepan_lid.position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['saucepan', 'saucepan_lid']
# Query: saucepan lid.
saucepan_lid = detect('saucepan_lid')
ret_val = saucepan_lid


########################################
#### parse_query_obj ####
########################################
objects = ['saucepan', 'saucepan_lid']
# Query: saucepan lid.
saucepan_lid = detect('saucepan_lid')
ret_val = saucepan_lid


########################################
#### composer ####
########################################
# Query: back to default pose.
reset_to_default_pose()


########################################
#### composer ####
########################################
# Query: move to 10cm on top of the saucepan.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point 10cm above the saucepan')
execute(movable, affordance_map=affordance_map)


########################################
#### parse_query_obj ####
########################################
objects = ['saucepan', 'saucepan_lid']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point 10cm above the saucepan.
affordance_map = get_empty_affordance_map()
saucepan = parse_query_obj('saucepan')
(min_x, min_y, min_z), (max_x, max_y, max_z) = saucepan.aabb
center_x, center_y, center_z = saucepan.position
# 10cm above so we add to z-axis
x = center_x
y = center_y
z = max_z + cm2index(10, 'z')
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### parse_query_obj ####
########################################
objects = ['saucepan', 'saucepan_lid']
# Query: saucepan.
saucepan = detect('saucepan')
ret_val = saucepan


Reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: open gripper.
movable = parse_query_obj('gripper')
gripper_map = get_gripper_map('open everywhere')
execute(movable, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['saucepan', 'saucepan_lid']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
ret_val = gripper_map


Reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: back to default pose.
reset_to_default_pose()






########################## Starting episode #########################
instruction: uncover the saucepan
########################################
#### planner ####
########################################
objects = ['saucepan', 'saucepan_lid']
# Query: uncover the saucepan.
composer("grasp the saucepan lid")
composer("back to default pose")
composer("move to 10cm on top of the saucepan")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the saucepan lid.
movable = parse_query_obj('saucepan lid')
affordance_map = get_affordance_map('a point at the center of the saucepan lid')
gripper_map = get_gripper_map('open everywhere except 1cm around the saucepan lid')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['saucepan', 'saucepan_lid']
# Query: saucepan lid.
saucepan_lid = detect('saucepan_lid')
ret_val = saucepan_lid


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the saucepan lid.
affordance_map = get_empty_affordance_map()
saucepan_lid = parse_query_obj('saucepan lid')
x, y, z = saucepan_lid.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the saucepan lid.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the saucepan lid
saucepan_lid = parse_query_obj('saucepan lid')
set_voxel_by_radius(gripper_map, saucepan_lid.position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['saucepan', 'saucepan_lid']
# Query: saucepan lid.
saucepan_lid = detect('saucepan_lid')
ret_val = saucepan_lid


########################################
#### parse_query_obj ####
########################################
objects = ['saucepan', 'saucepan_lid']
# Query: saucepan lid.
saucepan_lid = detect('saucepan_lid')
ret_val = saucepan_lid


########################################
#### composer ####
########################################
# Query: back to default pose.
reset_to_default_pose()


########################################
#### composer ####
########################################
# Query: move to 10cm on top of the saucepan.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point 10cm above the saucepan')
execute(movable, affordance_map=affordance_map)


########################################
#### parse_query_obj ####
########################################
objects = ['saucepan', 'saucepan_lid']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point 10cm above the saucepan.
affordance_map = get_empty_affordance_map()
saucepan = parse_query_obj('saucepan')
(min_x, min_y, min_z), (max_x, max_y, max_z) = saucepan.aabb
center_x, center_y, center_z = saucepan.position
# 10cm above so we add to z-axis
x = center_x
y = center_y
z = max_z + cm2index(10, 'z')
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### parse_query_obj ####
########################################
objects = ['saucepan', 'saucepan_lid']
# Query: saucepan.
saucepan = detect('saucepan')
ret_val = saucepan


Reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: open gripper.
movable = parse_query_obj('gripper')
gripper_map = get_gripper_map('open everywhere')
execute(movable, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['saucepan', 'saucepan_lid']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
ret_val = gripper_map


Reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: back to default pose.
reset_to_default_pose()






########################## Starting episode #########################
instruction: remove the lid from the pan
########################################
#### planner ####
########################################
objects = ['saucepan', 'saucepan_lid']
# Query: remove the lid from the pan.
composer("grasp the saucepan_lid")
composer("back to default pose")
composer("move away from the saucepan_lid by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the saucepan_lid.
movable = parse_query_obj('saucepan_lid')
affordance_map = get_affordance_map('a point at the center of saucepan_lid')
gripper_map = get_gripper_map('open everywhere except 1cm around the saucepan_lid')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['saucepan', 'saucepan_lid']
# Query: saucepan_lid.
saucepan_lid = detect('saucepan_lid')
ret_val = saucepan_lid


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of saucepan_lid.
affordance_map = get_empty_affordance_map()
saucepan_lid = parse_query_obj('saucepan lid')
x, y, z = saucepan_lid.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the saucepan_lid.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the saucepan_lid
saucepan_lid = parse_query_obj('saucepan lid')
set_voxel_by_radius(gripper_map, saucepan_lid.position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['saucepan', 'saucepan_lid']
# Query: saucepan lid.
saucepan_lid = detect('saucepan_lid')
ret_val = saucepan_lid


########################################
#### parse_query_obj ####
########################################
objects = ['saucepan', 'saucepan_lid']
# Query: saucepan lid.
saucepan_lid = detect('saucepan_lid')
ret_val = saucepan_lid


########################################
#### composer ####
########################################
# Query: back to default pose.
reset_to_default_pose()


########################################
#### composer ####
########################################
# Query: move away from the saucepan_lid by 25cm.
movable = parse_query_obj('gripper')
avoidance_map = get_avoidance_map('25cm from the saucepan_lid')
execute(movable, avoidance_map=avoidance_map)


########################################
#### parse_query_obj ####
########################################
objects = ['saucepan', 'saucepan_lid']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_avoidance_map ####
########################################
# Query: 25cm from the saucepan_lid.
avoidance_map = get_empty_avoidance_map()
saucepan_lid = parse_query_obj('saucepan_lid')
set_voxel_by_radius(avoidance_map, saucepan_lid.position, radius_cm=25, value=1)
ret_val = avoidance_map


Reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: open gripper.
movable = parse_query_obj('gripper')
gripper_map = get_gripper_map('open everywhere')
execute(movable, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['saucepan', 'saucepan_lid']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
ret_val = gripper_map


Reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: back to default pose.
reset_to_default_pose()






########################## Starting episode #########################
instruction: remove the lid from the pan
########################################
#### planner ####
########################################
objects = ['saucepan', 'saucepan_lid']
# Query: remove the lid from the pan.
composer("grasp the saucepan_lid")
composer("back to default pose")
composer("move away from the saucepan_lid by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the saucepan_lid.
movable = parse_query_obj('saucepan_lid')
affordance_map = get_affordance_map('a point at the center of saucepan_lid')
gripper_map = get_gripper_map('open everywhere except 1cm around the saucepan_lid')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['saucepan', 'saucepan_lid']
# Query: saucepan_lid.
saucepan_lid = detect('saucepan_lid')
ret_val = saucepan_lid


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of saucepan_lid.
affordance_map = get_empty_affordance_map()
saucepan_lid = parse_query_obj('saucepan lid')
x, y, z = saucepan_lid.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the saucepan_lid.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the saucepan_lid
saucepan_lid = parse_query_obj('saucepan lid')
set_voxel_by_radius(gripper_map, saucepan_lid.position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['saucepan', 'saucepan_lid']
# Query: saucepan lid.
saucepan_lid = detect('saucepan_lid')
ret_val = saucepan_lid


########################################
#### parse_query_obj ####
########################################
objects = ['saucepan', 'saucepan_lid']
# Query: saucepan lid.
saucepan_lid = detect('saucepan_lid')
ret_val = saucepan_lid


########################################
#### composer ####
########################################
# Query: back to default pose.
reset_to_default_pose()


########################################
#### composer ####
########################################
# Query: move away from the saucepan_lid by 25cm.
movable = parse_query_obj('gripper')
avoidance_map = get_avoidance_map('25cm from the saucepan_lid')
execute(movable, avoidance_map=avoidance_map)


########################################
#### parse_query_obj ####
########################################
objects = ['saucepan', 'saucepan_lid']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_avoidance_map ####
########################################
# Query: 25cm from the saucepan_lid.
avoidance_map = get_empty_avoidance_map()
saucepan_lid = parse_query_obj('saucepan_lid')
set_voxel_by_radius(avoidance_map, saucepan_lid.position, radius_cm=25, value=1)
ret_val = avoidance_map


Reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: open gripper.
movable = parse_query_obj('gripper')
gripper_map = get_gripper_map('open everywhere')
execute(movable, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['saucepan', 'saucepan_lid']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
ret_val = gripper_map


Reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: back to default pose.
reset_to_default_pose()






########################## Starting episode #########################
instruction: take umbrella out of umbrella stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: take umbrella out of umbrella stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    ret_val = umbrella
else:
    ret_val = stand


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: lift the umbrella out of the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: lift the umbrella out of the stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    ret_val = umbrella
else:
    ret_val = stand


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: remove the umbrella from the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: remove the umbrella from the stand.
composer("grasp the umbrella")
composer("back to default pose")
composer("move away from the umbrella by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: get the umbrella
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: get the umbrella.
composer("grasp the umbrella")


########################################
#### composer ####
########################################
# Query: grasp the umbrella.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    ret_val = umbrella
else:
    ret_val = stand


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: remove the umbrella from the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: remove the umbrella from the stand.
composer("grasp the umbrella")
composer("back to default pose")
composer("move away from the umbrella by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: remove the umbrella from the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: remove the umbrella from the stand.
composer("grasp the umbrella")
composer("back to default pose")
composer("move away from the umbrella by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: retrieve the umbrella from the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: retrieve the umbrella from the stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    ret_val = umbrella
else:
    ret_val = stand


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: grasping the umbrella by its handle, lift it up and out of the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: grasping the umbrella by its handle, lift it up and out of the stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move up by 20cm")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: retrieve the umbrella from the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: retrieve the umbrella from the stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: get the umbrella
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: get the umbrella.
composer("grasp the umbrella")


########################################
#### composer ####
########################################
# Query: grasp the umbrella.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: grasping the umbrella by its handle, lift it up and out of the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: grasping the umbrella by its handle, lift it up and out of the stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move up by 20cm")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: remove the umbrella from the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: remove the umbrella from the stand.
composer("grasp the umbrella")
composer("back to default pose")
composer("move away from the umbrella by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: remove the umbrella from the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: remove the umbrella from the stand.
composer("grasp the umbrella")
composer("back to default pose")
composer("move away from the umbrella by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    ret_val = umbrella
else:
    ret_val = stand


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: get the umbrella
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: get the umbrella.
composer("grasp the umbrella")


########################################
#### composer ####
########################################
# Query: grasp the umbrella.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: retrieve the umbrella from the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: retrieve the umbrella from the stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    ret_val = umbrella
else:
    ret_val = stand


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: lift the umbrella out of the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: lift the umbrella out of the stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: take umbrella out of umbrella stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: take umbrella out of umbrella stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    ret_val = umbrella
else:
    ret_val = stand


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: take umbrella out of umbrella stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: take umbrella out of umbrella stand.
composer("grasp the umbrella")
composer("back to default pose")
composer("move away from the umbrella stand by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    ret_val = umbrella
else:
    ret_val = stand


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: get the umbrella
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: get the umbrella.
composer("grasp the umbrella")


########################################
#### composer ####
########################################
# Query: grasp the umbrella.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: lift the umbrella out of the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: lift the umbrella out of the stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: take umbrella out of umbrella stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: take umbrella out of umbrella stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: take umbrella out of umbrella stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: take umbrella out of umbrella stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    ret_val = umbrella
else:
    ret_val = stand


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: take umbrella out of umbrella stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: take umbrella out of umbrella stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: lift the umbrella out of the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: lift the umbrella out of the stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: lift the umbrella out of the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: lift the umbrella out of the stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: lift the umbrella out of the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: lift the umbrella out of the stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: retrieve the umbrella from the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: retrieve the umbrella from the stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: take umbrella out of umbrella stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: take umbrella out of umbrella stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: grasping the umbrella by its handle, lift it up and out of the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: grasping the umbrella by its handle, lift it up and out of the stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move up by 20cm")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    ret_val = umbrella
else:
    ret_val = stand


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: retrieve the umbrella from the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: retrieve the umbrella from the stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    ret_val = umbrella
else:
    ret_val = stand


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: remove the umbrella from the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: remove the umbrella from the stand.
composer("grasp the umbrella")
composer("back to default pose")
composer("move away from the umbrella by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: retrieve the umbrella from the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: retrieve the umbrella from the stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    ret_val = umbrella
else:
    ret_val = stand


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: grasping the umbrella by its handle, lift it up and out of the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: grasping the umbrella by its handle, lift it up and out of the stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move up by 20cm")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: take umbrella out of umbrella stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: take umbrella out of umbrella stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: lift the umbrella out of the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: lift the umbrella out of the stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    ret_val = umbrella
else:
    ret_val = stand


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: remove the umbrella from the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: remove the umbrella from the stand.
composer("grasp the umbrella")
composer("back to default pose")
composer("move away from the umbrella by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: take umbrella out of umbrella stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: take umbrella out of umbrella stand.
composer("grasp the umbrella")
composer("back to default pose")
composer("move away from the umbrella stand by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: remove the umbrella from the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: remove the umbrella from the stand.
composer("grasp the umbrella")
composer("back to default pose")
composer("move away from the umbrella by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    ret_val = umbrella
else:
    ret_val = stand


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: take umbrella out of umbrella stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: take umbrella out of umbrella stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: grasping the umbrella by its handle, lift it up and out of the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: grasping the umbrella by its handle, lift it up and out of the stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move up by 20cm")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    ret_val = umbrella
else:
    ret_val = stand


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: remove the umbrella from the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: remove the umbrella from the stand.
composer("grasp the umbrella")
composer("back to default pose")
composer("move away from the umbrella by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: grasping the umbrella by its handle, lift it up and out of the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: grasping the umbrella by its handle, lift it up and out of the stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move up by 20cm")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: get the umbrella
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: get the umbrella.
composer("grasp the umbrella")


########################################
#### composer ####
########################################
# Query: grasp the umbrella.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    ret_val = umbrella
else:
    ret_val = stand


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: get the umbrella
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: get the umbrella.
composer("grasp the umbrella")


########################################
#### composer ####
########################################
# Query: grasp the umbrella.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    ret_val = umbrella
else:
    ret_val = stand


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: remove the umbrella from the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: remove the umbrella from the stand.
composer("grasp the umbrella")
composer("back to default pose")
composer("move away from the umbrella by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    ret_val = umbrella
else:
    ret_val = stand


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: retrieve the umbrella from the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: retrieve the umbrella from the stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: get the umbrella
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: get the umbrella.
composer("grasp the umbrella")


########################################
#### composer ####
########################################
# Query: grasp the umbrella.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: grasping the umbrella by its handle, lift it up and out of the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: grasping the umbrella by its handle, lift it up and out of the stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move up by 20cm")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: lift the umbrella out of the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: lift the umbrella out of the stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: lift the umbrella out of the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: lift the umbrella out of the stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: lift the umbrella out of the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: lift the umbrella out of the stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: lift the umbrella out of the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: lift the umbrella out of the stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: get the umbrella
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: get the umbrella.
composer("grasp the umbrella")


########################################
#### composer ####
########################################
# Query: grasp the umbrella.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    ret_val = umbrella
else:
    ret_val = stand


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: get the umbrella
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: get the umbrella.
composer("grasp the umbrella")


########################################
#### composer ####
########################################
# Query: grasp the umbrella.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: grasping the umbrella by its handle, lift it up and out of the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: grasping the umbrella by its handle, lift it up and out of the stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move up by 20cm")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: lift the umbrella out of the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: lift the umbrella out of the stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: lift the umbrella out of the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: lift the umbrella out of the stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: get the umbrella
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: get the umbrella.
composer("grasp the umbrella")


########################################
#### composer ####
########################################
# Query: grasp the umbrella.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    ret_val = umbrella
else:
    ret_val = stand


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: get the umbrella
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: get the umbrella.
composer("grasp the umbrella")


########################################
#### composer ####
########################################
# Query: grasp the umbrella.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    ret_val = umbrella
else:
    ret_val = stand


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: remove the umbrella from the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: remove the umbrella from the stand.
composer("grasp the umbrella")
composer("back to default pose")
composer("move away from the umbrella by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    ret_val = umbrella
else:
    ret_val = stand


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: lift the umbrella out of the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: lift the umbrella out of the stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    ret_val = umbrella
else:
    ret_val = stand


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: get the umbrella
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: get the umbrella.
composer("grasp the umbrella")


########################################
#### composer ####
########################################
# Query: grasp the umbrella.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: remove the umbrella from the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: remove the umbrella from the stand.
composer("grasp the umbrella")
composer("back to default pose")
composer("move away from the umbrella by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: get the umbrella
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: get the umbrella.
composer("grasp the umbrella")


########################################
#### composer ####
########################################
# Query: grasp the umbrella.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    ret_val = umbrella
else:
    ret_val = stand


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: take umbrella out of umbrella stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: take umbrella out of umbrella stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: grasping the umbrella by its handle, lift it up and out of the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: grasping the umbrella by its handle, lift it up and out of the stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move up by 20cm")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    ret_val = umbrella
else:
    ret_val = stand


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: grasping the umbrella by its handle, lift it up and out of the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: grasping the umbrella by its handle, lift it up and out of the stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move up by 20cm")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    ret_val = umbrella
else:
    ret_val = stand


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: retrieve the umbrella from the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: retrieve the umbrella from the stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    ret_val = umbrella
else:
    ret_val = stand


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: remove the umbrella from the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: remove the umbrella from the stand.
composer("grasp the umbrella")
composer("back to default pose")
composer("move away from the umbrella by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: take umbrella out of umbrella stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: take umbrella out of umbrella stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: lift the umbrella out of the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: lift the umbrella out of the stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    ret_val = umbrella
else:
    ret_val = stand


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: lift the umbrella out of the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: lift the umbrella out of the stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: get the umbrella
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: get the umbrella.
composer("grasp the umbrella")


########################################
#### composer ####
########################################
# Query: grasp the umbrella.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    ret_val = umbrella
else:
    ret_val = stand


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: take umbrella out of umbrella stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: take umbrella out of umbrella stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: take umbrella out of umbrella stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: take umbrella out of umbrella stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: take umbrella out of umbrella stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: take umbrella out of umbrella stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: retrieve the umbrella from the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: retrieve the umbrella from the stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    ret_val = umbrella
else:
    ret_val = stand


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: get the umbrella
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: get the umbrella.
composer("grasp the umbrella")


########################################
#### composer ####
########################################
# Query: grasp the umbrella.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: lift the umbrella out of the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: lift the umbrella out of the stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    ret_val = umbrella
else:
    ret_val = stand


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: lift the umbrella out of the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: lift the umbrella out of the stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: remove the umbrella from the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: remove the umbrella from the stand.
composer("grasp the umbrella")
composer("back to default pose")
composer("move away from the umbrella by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    ret_val = umbrella
else:
    ret_val = stand


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: retrieve the umbrella from the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: retrieve the umbrella from the stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: grasping the umbrella by its handle, lift it up and out of the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: grasping the umbrella by its handle, lift it up and out of the stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move up by 20cm")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: retrieve the umbrella from the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: retrieve the umbrella from the stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: remove the umbrella from the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: remove the umbrella from the stand.
composer("grasp the umbrella")
composer("back to default pose")
composer("move away from the umbrella by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: get the umbrella
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: get the umbrella.
composer("grasp the umbrella")


########################################
#### composer ####
########################################
# Query: grasp the umbrella.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: retrieve the umbrella from the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: retrieve the umbrella from the stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: take umbrella out of umbrella stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: take umbrella out of umbrella stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: get the umbrella
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: get the umbrella.
composer("grasp the umbrella")


########################################
#### composer ####
########################################
# Query: grasp the umbrella.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    ret_val = umbrella
else:
    ret_val = stand


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: take umbrella out of umbrella stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: take umbrella out of umbrella stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: get the umbrella
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: get the umbrella.
composer("grasp the umbrella")


########################################
#### composer ####
########################################
# Query: grasp the umbrella.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: retrieve the umbrella from the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: retrieve the umbrella from the stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: retrieve the umbrella from the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: retrieve the umbrella from the stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    ret_val = umbrella
else:
    ret_val = stand


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: grasping the umbrella by its handle, lift it up and out of the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: grasping the umbrella by its handle, lift it up and out of the stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move up by 20cm")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    ret_val = umbrella
else:
    ret_val = stand


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: remove the umbrella from the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: remove the umbrella from the stand.
composer("grasp the umbrella")
composer("back to default pose")
composer("move away from the umbrella by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: remove the umbrella from the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: remove the umbrella from the stand.
composer("grasp the umbrella")
composer("back to default pose")
composer("move away from the umbrella by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: grasping the umbrella by its handle, lift it up and out of the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: grasping the umbrella by its handle, lift it up and out of the stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move up by 20cm")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: lift the umbrella out of the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: lift the umbrella out of the stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    ret_val = umbrella
else:
    ret_val = stand


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: remove the umbrella from the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: remove the umbrella from the stand.
composer("grasp the umbrella")
composer("back to default pose")
composer("move away from the umbrella by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: get the umbrella
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: get the umbrella.
composer("grasp the umbrella")


########################################
#### composer ####
########################################
# Query: grasp the umbrella.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: get the umbrella
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: get the umbrella.
composer("grasp the umbrella")


########################################
#### composer ####
########################################
# Query: grasp the umbrella.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: remove the umbrella from the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: remove the umbrella from the stand.
composer("grasp the umbrella")
composer("back to default pose")
composer("move away from the umbrella by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    ret_val = umbrella
else:
    ret_val = stand


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: remove the umbrella from the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: remove the umbrella from the stand.
composer("grasp the umbrella")
composer("back to default pose")
composer("move away from the umbrella by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    ret_val = umbrella
else:
    ret_val = stand


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: get the umbrella
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: get the umbrella.
composer("grasp the umbrella")


########################################
#### composer ####
########################################
# Query: grasp the umbrella.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: lift the umbrella out of the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: lift the umbrella out of the stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: remove the umbrella from the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: remove the umbrella from the stand.
composer("grasp the umbrella")
composer("back to default pose")
composer("move away from the umbrella by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: get the umbrella
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: get the umbrella.
composer("grasp the umbrella")


########################################
#### composer ####
########################################
# Query: grasp the umbrella.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: get the umbrella
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: get the umbrella.
composer("grasp the umbrella")


########################################
#### composer ####
########################################
# Query: grasp the umbrella.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: lift the umbrella out of the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: lift the umbrella out of the stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: retrieve the umbrella from the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: retrieve the umbrella from the stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: retrieve the umbrella from the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: retrieve the umbrella from the stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: take umbrella out of umbrella stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: take umbrella out of umbrella stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: remove the umbrella from the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: remove the umbrella from the stand.
composer("grasp the umbrella")
composer("back to default pose")
composer("move away from the umbrella by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    ret_val = umbrella
else:
    ret_val = stand


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: get the umbrella
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: get the umbrella.
composer("grasp the umbrella")


########################################
#### composer ####
########################################
# Query: grasp the umbrella.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    ret_val = umbrella
else:
    ret_val = stand


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: grasping the umbrella by its handle, lift it up and out of the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: grasping the umbrella by its handle, lift it up and out of the stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move up by 20cm")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: lift the umbrella out of the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: lift the umbrella out of the stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    ret_val = umbrella
else:
    ret_val = stand


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: remove the umbrella from the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: remove the umbrella from the stand.
composer("grasp the umbrella")
composer("back to default pose")
composer("move away from the umbrella by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: get the umbrella
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: get the umbrella.
composer("grasp the umbrella")


########################################
#### composer ####
########################################
# Query: grasp the umbrella.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    ret_val = umbrella
else:
    ret_val = stand


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: take umbrella out of umbrella stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: take umbrella out of umbrella stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: grasping the umbrella by its handle, lift it up and out of the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: grasping the umbrella by its handle, lift it up and out of the stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move up by 20cm")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: take umbrella out of umbrella stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: take umbrella out of umbrella stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    ret_val = umbrella
else:
    ret_val = stand


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: get the umbrella
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: get the umbrella.
composer("grasp the umbrella")


########################################
#### composer ####
########################################
# Query: grasp the umbrella.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: lift the umbrella out of the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: lift the umbrella out of the stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: get the umbrella
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: get the umbrella.
composer("grasp the umbrella")


########################################
#### composer ####
########################################
# Query: grasp the umbrella.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    ret_val = umbrella
else:
    ret_val = stand


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: get the umbrella
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: get the umbrella.
composer("grasp the umbrella")


########################################
#### composer ####
########################################
# Query: grasp the umbrella.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    ret_val = umbrella
else:
    ret_val = stand


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: retrieve the umbrella from the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: retrieve the umbrella from the stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    ret_val = umbrella
else:
    ret_val = stand


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: remove the umbrella from the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: remove the umbrella from the stand.
composer("grasp the umbrella")
composer("back to default pose")
composer("move away from the umbrella by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    ret_val = umbrella
else:
    ret_val = stand


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: remove the umbrella from the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: remove the umbrella from the stand.
composer("grasp the umbrella")
composer("back to default pose")
composer("move away from the umbrella by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: remove the umbrella from the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: remove the umbrella from the stand.
composer("grasp the umbrella")
composer("back to default pose")
composer("move away from the umbrella by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    ret_val = umbrella
else:
    ret_val = stand


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: lift the umbrella out of the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: lift the umbrella out of the stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: get the umbrella
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: get the umbrella.
composer("grasp the umbrella")


########################################
#### composer ####
########################################
# Query: grasp the umbrella.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: take umbrella out of umbrella stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: take umbrella out of umbrella stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: retrieve the umbrella from the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: retrieve the umbrella from the stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: get the umbrella
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: get the umbrella.
composer("grasp the umbrella")


########################################
#### composer ####
########################################
# Query: grasp the umbrella.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: remove the umbrella from the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: remove the umbrella from the stand.
composer("grasp the umbrella")
composer("back to default pose")
composer("move away from the umbrella by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: remove the umbrella from the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: remove the umbrella from the stand.
composer("grasp the umbrella")
composer("back to default pose")
composer("move away from the umbrella by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: retrieve the umbrella from the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: retrieve the umbrella from the stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: remove the umbrella from the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: remove the umbrella from the stand.
composer("grasp the umbrella")
composer("back to default pose")
composer("move away from the umbrella by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: remove the umbrella from the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: remove the umbrella from the stand.
composer("grasp the umbrella")
composer("back to default pose")
composer("move away from the umbrella by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    ret_val = umbrella
else:
    ret_val = stand


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: grasping the umbrella by its handle, lift it up and out of the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: grasping the umbrella by its handle, lift it up and out of the stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move up by 20cm")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: get the umbrella
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: get the umbrella.
composer("grasp the umbrella")


########################################
#### composer ####
########################################
# Query: grasp the umbrella.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: remove the umbrella from the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: remove the umbrella from the stand.
composer("grasp the umbrella")
composer("back to default pose")
composer("move away from the umbrella by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    ret_val = umbrella
else:
    ret_val = stand


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: lift the umbrella out of the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: lift the umbrella out of the stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: take umbrella out of umbrella stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: take umbrella out of umbrella stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    ret_val = umbrella
else:
    ret_val = stand


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: lift the umbrella out of the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: lift the umbrella out of the stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: take umbrella out of umbrella stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: take umbrella out of umbrella stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: grasping the umbrella by its handle, lift it up and out of the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: grasping the umbrella by its handle, lift it up and out of the stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move up by 20cm")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    ret_val = umbrella
else:
    ret_val = stand


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: grasping the umbrella by its handle, lift it up and out of the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: grasping the umbrella by its handle, lift it up and out of the stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move up by 20cm")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    ret_val = umbrella
else:
    ret_val = stand


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: grasping the umbrella by its handle, lift it up and out of the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: grasping the umbrella by its handle, lift it up and out of the stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move up by 20cm")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: grasping the umbrella by its handle, lift it up and out of the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: grasping the umbrella by its handle, lift it up and out of the stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move up by 20cm")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: grasping the umbrella by its handle, lift it up and out of the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: grasping the umbrella by its handle, lift it up and out of the stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move up by 20cm")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: remove the umbrella from the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: remove the umbrella from the stand.
composer("grasp the umbrella")
composer("back to default pose")
composer("move away from the umbrella by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: take umbrella out of umbrella stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: take umbrella out of umbrella stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: take umbrella out of umbrella stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: take umbrella out of umbrella stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    ret_val = umbrella
else:
    ret_val = stand


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: lift the umbrella out of the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: lift the umbrella out of the stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    ret_val = umbrella
else:
    ret_val = stand


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: take umbrella out of umbrella stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: take umbrella out of umbrella stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    ret_val = umbrella
else:
    ret_val = stand


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: get the umbrella
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: get the umbrella.
composer("grasp the umbrella")


########################################
#### composer ####
########################################
# Query: grasp the umbrella.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: take umbrella out of umbrella stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: take umbrella out of umbrella stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    ret_val = umbrella
else:
    ret_val = stand


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: get the umbrella
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: get the umbrella.
composer("grasp the umbrella")


########################################
#### composer ####
########################################
# Query: grasp the umbrella.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    ret_val = umbrella
else:
    ret_val = stand


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: retrieve the umbrella from the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: retrieve the umbrella from the stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: get the umbrella
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: get the umbrella.
composer("grasp the umbrella")


########################################
#### composer ####
########################################
# Query: grasp the umbrella.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: grasping the umbrella by its handle, lift it up and out of the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: grasping the umbrella by its handle, lift it up and out of the stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move up by 20cm")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: retrieve the umbrella from the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: retrieve the umbrella from the stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    ret_val = umbrella
else:
    ret_val = stand


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: lift the umbrella out of the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: lift the umbrella out of the stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: remove the umbrella from the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: remove the umbrella from the stand.
composer("grasp the umbrella")
composer("back to default pose")
composer("move away from the umbrella by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    ret_val = umbrella
else:
    ret_val = stand


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: get the umbrella
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: get the umbrella.
composer("grasp the umbrella")


########################################
#### composer ####
########################################
# Query: grasp the umbrella.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: lift the umbrella out of the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: lift the umbrella out of the stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    ret_val = umbrella
else:
    ret_val = stand


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: get the umbrella
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: get the umbrella.
composer("grasp the umbrella")


########################################
#### composer ####
########################################
# Query: grasp the umbrella.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: lift the umbrella out of the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: lift the umbrella out of the stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: retrieve the umbrella from the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: retrieve the umbrella from the stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: grasping the umbrella by its handle, lift it up and out of the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: grasping the umbrella by its handle, lift it up and out of the stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move up by 20cm")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: remove the umbrella from the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: remove the umbrella from the stand.
composer("grasp the umbrella")
composer("back to default pose")
composer("move away from the umbrella by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: take umbrella out of umbrella stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: take umbrella out of umbrella stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    ret_val = umbrella
else:
    ret_val = stand


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: lift the umbrella out of the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: lift the umbrella out of the stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: get the umbrella
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: get the umbrella.
composer("grasp the umbrella")


########################################
#### composer ####
########################################
# Query: grasp the umbrella.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: retrieve the umbrella from the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: retrieve the umbrella from the stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: remove the umbrella from the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: remove the umbrella from the stand.
composer("grasp the umbrella")
composer("back to default pose")
composer("move away from the umbrella by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: take umbrella out of umbrella stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: take umbrella out of umbrella stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: grasping the umbrella by its handle, lift it up and out of the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: grasping the umbrella by its handle, lift it up and out of the stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move up by 20cm")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    ret_val = umbrella
else:
    ret_val = stand


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: take umbrella out of umbrella stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: take umbrella out of umbrella stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: retrieve the umbrella from the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: retrieve the umbrella from the stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: grasping the umbrella by its handle, lift it up and out of the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: grasping the umbrella by its handle, lift it up and out of the stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move up by 20cm")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: remove the umbrella from the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: remove the umbrella from the stand.
composer("grasp the umbrella")
composer("back to default pose")
composer("move away from the umbrella by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    ret_val = umbrella
else:
    ret_val = stand


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: lift the umbrella out of the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: lift the umbrella out of the stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: retrieve the umbrella from the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: retrieve the umbrella from the stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: get the umbrella
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: get the umbrella.
composer("grasp the umbrella")


########################################
#### composer ####
########################################
# Query: grasp the umbrella.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    ret_val = umbrella
else:
    ret_val = stand


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: get the umbrella
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: get the umbrella.
composer("grasp the umbrella")


########################################
#### composer ####
########################################
# Query: grasp the umbrella.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: take umbrella out of umbrella stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: take umbrella out of umbrella stand.
composer("grasp the umbrella")
composer("back to default pose")
composer("move away from the umbrella stand by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: retrieve the umbrella from the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: retrieve the umbrella from the stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    ret_val = umbrella
else:
    ret_val = stand


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: remove the umbrella from the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: remove the umbrella from the stand.
composer("grasp the umbrella")
composer("back to default pose")
composer("move away from the umbrella by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: retrieve the umbrella from the stand
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: retrieve the umbrella from the stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    umbrella_handle = umbrella
else:
    umbrella_handle = stand
ret_val = umbrella_handle






########################## Starting episode #########################
instruction: retrieve the umbrella from the stand
########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: retrieve the umbrella from the stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: grasping the umbrella by its handle, lift it up and out of the stand
########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: grasping the umbrella by its handle, lift it up and out of the stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move up by 20cm")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    ret_val = umbrella
else:
    ret_val = stand


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    ret_val = umbrella
else:
    ret_val = stand


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


*** Error: 'handle_position'




########################## Starting episode #########################
instruction: grasping the umbrella by its handle, lift it up and out of the stand
########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella.
umbrella = detect('umbrella')
ret_val = umbrella


########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: grasping the umbrella by its handle, lift it up and out of the stand.
composer("grasp the umbrella handle")
composer("back to default pose")
composer("move up by 20cm")
composer("move away from the umbrella handle by 25cm")
composer("open gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the umbrella handle.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


*** Error: 'handle_position'
########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map






########################## Starting episode #########################
instruction: get the umbrella
########################################
#### planner ####
########################################
objects = ['umbrella', 'stand']
# Query: get the umbrella.
composer("grasp the umbrella")


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    ret_val = umbrella
else:
    ret_val = stand


########################################
#### composer ####
########################################
# Query: grasp the umbrella.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the umbrella handle')
gripper_map = get_gripper_map('open everywhere except 1cm around the umbrella handle')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the umbrella handle.
affordance_map = get_empty_affordance_map()
umbrella_handle = parse_query_obj('umbrella handle')
x, y, z = umbrella_handle.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the umbrella handle.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the umbrella handle
umbrella = parse_query_obj('umbrella')
set_voxel_by_radius(gripper_map, umbrella.handle_position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['umbrella', 'stand']
# Query: umbrella handle.
umbrella = detect('umbrella')
stand = detect('stand')
if umbrella.position[2] > stand.position[2]:
    ret_val = umbrella
else:
    ret_val = stand




########################## Starting episode #########################
instruction: put the hanger on the other rack
*** Error: [Errno 5] Input/output error
########################################
#### planner ####
########################################
objects = ['target rack', 'source rack', 'hanger']
# Query: put the hanger on the other rack.
composer("grasp the hanger")
composer("back to default pose")
composer("move to 10cm on top of the target rack")
composer("open gripper")
composer("back to default pose")


*** Error: [Errno 5] Input/output error
########################################
#### composer ####
########################################
# Query: grasp the hanger.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the hanger')
gripper_map = get_gripper_map('open everywhere except 1cm around the hanger')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


*** Error: [Errno 5] Input/output error
########################################
#### parse_query_obj ####
########################################
objects = ['target rack', 'source rack', 'hanger']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


*** Error: [Errno 5] Input/output error
########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the hanger.
affordance_map = get_empty_affordance_map()
hanger = parse_query_obj('hanger')
x, y, z = hanger.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the hanger.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the hanger
hanger = parse_query_obj('hanger')
set_voxel_by_radius(gripper_map, hanger.position, radius_cm=1, value=0)
ret_val = gripper_map


*** Error: [Errno 5] Input/output error
########################################
#### parse_query_obj ####
########################################
objects = ['target rack', 'source rack', 'hanger']
# Query: hanger.
hanger = detect('hanger')
ret_val = hanger


*** Error: 'NoneType' object has no attribute 'astype'
*** Error: [Errno 5] Input/output error




########################## Starting episode #########################
instruction: put the hanger on the other rack
*** Error: [Errno 5] Input/output error
########################################
#### planner ####
########################################
objects = ['target rack', 'source rack', 'hanger']
# Query: put the hanger on the other rack.
composer("grasp the hanger")
composer("back to default pose")
composer("move to 10cm on top of the target rack")
composer("open gripper")
composer("back to default pose")


*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
########################################
#### composer ####
########################################
# Query: grasp the hanger.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the hanger')
gripper_map = get_gripper_map('open everywhere except 1cm around the hanger')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['target rack', 'source rack', 'hanger']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


*** Error: [Errno 5] Input/output error
########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the hanger.
affordance_map = get_empty_affordance_map()
hanger = parse_query_obj('hanger')
x, y, z = hanger.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


*** Error: [Errno 5] Input/output error
########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the hanger.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the hanger
hanger = parse_query_obj('hanger')
set_voxel_by_radius(gripper_map, hanger.position, radius_cm=1, value=0)
ret_val = gripper_map


*** Error: [Errno 5] Input/output error
########################################
#### parse_query_obj ####
########################################
objects = ['target rack', 'source rack', 'hanger']
# Query: hanger.
hanger = detect('hanger')
ret_val = hanger


*** Error: 'NoneType' object has no attribute 'astype'




########################## Starting episode #########################
instruction: move hanger onto the other rackmove the hanger from one rack to the other
*** Error: [Errno 5] Input/output error
########################################
#### planner ####
########################################
objects = ['target rack', 'source rack', 'hanger']
# Query: move hanger onto the other rackmove the hanger from one rack to the other.
composer("grasp the hanger")
composer("back to default pose")
composer("move to 10cm on top of the source rack")
composer("open gripper")
composer("back to default pose")
composer("move to 10cm on top of the target rack")
composer("close the gripper")
composer("back to default pose")


*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
########################################
#### composer ####
########################################
# Query: grasp the hanger.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the hanger')
gripper_map = get_gripper_map('open everywhere except 1cm around the hanger')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['target rack', 'source rack', 'hanger']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the hanger.
affordance_map = get_empty_affordance_map()
hanger = parse_query_obj('hanger')
x, y, z = hanger.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the hanger.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the hanger
hanger = parse_query_obj('hanger')
set_voxel_by_radius(gripper_map, hanger.position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['target rack', 'source rack', 'hanger']
# Query: hanger.
hanger = detect('hanger')
ret_val = hanger


*** Error: 'NoneType' object has no attribute 'astype'
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error




########################## Starting episode #########################
instruction: pick up the hanger and place it on the other rack
*** Error: [Errno 5] Input/output error
########################################
#### planner ####
########################################
objects = ['target rack', 'source rack', 'hanger']
# Query: pick up the hanger and place it on the other rack.
composer("grasp the hanger")
composer("back to default pose")
composer("move to 10cm on top of the target rack")
composer("open gripper")
composer("back to default pose")


*** Error: [Errno 5] Input/output error
########################################
#### composer ####
########################################
# Query: grasp the hanger.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the hanger')
gripper_map = get_gripper_map('open everywhere except 1cm around the hanger')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


*** Error: [Errno 5] Input/output error
########################################
#### parse_query_obj ####
########################################
objects = ['target rack', 'source rack', 'hanger']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


*** Error: [Errno 5] Input/output error
########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the hanger.
affordance_map = get_empty_affordance_map()
hanger = parse_query_obj('hanger')
x, y, z = hanger.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


*** Error: [Errno 5] Input/output error
########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the hanger.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the hanger
hanger = parse_query_obj('hanger')
set_voxel_by_radius(gripper_map, hanger.position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['target rack', 'source rack', 'hanger']
# Query: hanger.
hanger = detect('hanger')
ret_val = hanger


*** Error: 'NoneType' object has no attribute 'astype'
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error




########################## Starting episode #########################
instruction: pick up the hanger and place it on the other rack
*** Error: [Errno 5] Input/output error
########################################
#### planner ####
########################################
objects = ['target rack', 'source rack', 'hanger']
# Query: pick up the hanger and place it on the other rack.
composer("grasp the hanger")
composer("back to default pose")
composer("move to 10cm on top of the target rack")
composer("open gripper")
composer("back to default pose")


*** Error: [Errno 5] Input/output error
########################################
#### composer ####
########################################
# Query: grasp the hanger.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the hanger')
gripper_map = get_gripper_map('open everywhere except 1cm around the hanger')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['target rack', 'source rack', 'hanger']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the hanger.
affordance_map = get_empty_affordance_map()
hanger = parse_query_obj('hanger')
x, y, z = hanger.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


*** Error: [Errno 5] Input/output error
########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the hanger.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the hanger
hanger = parse_query_obj('hanger')
set_voxel_by_radius(gripper_map, hanger.position, radius_cm=1, value=0)
ret_val = gripper_map


*** Error: [Errno 5] Input/output error
########################################
#### parse_query_obj ####
########################################
objects = ['target rack', 'source rack', 'hanger']
# Query: hanger.
hanger = detect('hanger')
ret_val = hanger


*** Error: 'NoneType' object has no attribute 'astype'
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error




########################## Starting episode #########################
instruction: put the hanger on the other rack
*** Error: [Errno 5] Input/output error
########################################
#### planner ####
########################################
objects = ['target rack', 'source rack', 'hanger']
# Query: put the hanger on the other rack.
composer("grasp the hanger")
composer("back to default pose")
composer("move to 10cm on top of the target rack")
composer("open gripper")
composer("back to default pose")


*** Error: [Errno 5] Input/output error
########################################
#### composer ####
########################################
# Query: grasp the hanger.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the hanger')
gripper_map = get_gripper_map('open everywhere except 1cm around the hanger')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


*** Error: [Errno 5] Input/output error
########################################
#### parse_query_obj ####
########################################
objects = ['target rack', 'source rack', 'hanger']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


*** Error: [Errno 5] Input/output error
########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the hanger.
affordance_map = get_empty_affordance_map()
hanger = parse_query_obj('hanger')
x, y, z = hanger.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the hanger.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the hanger
hanger = parse_query_obj('hanger')
set_voxel_by_radius(gripper_map, hanger.position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['target rack', 'source rack', 'hanger']
# Query: hanger.
hanger = detect('hanger')
ret_val = hanger


*** Error: 'NoneType' object has no attribute 'astype'
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error




########################## Starting episode #########################
instruction: put the hanger on the other rack
*** Error: [Errno 5] Input/output error
########################################
#### planner ####
########################################
objects = ['target rack', 'source rack', 'hanger']
# Query: put the hanger on the other rack.
composer("grasp the hanger")
composer("back to default pose")
composer("move to 10cm on top of the target rack")
composer("open gripper")
composer("back to default pose")


*** Error: [Errno 5] Input/output error
########################################
#### composer ####
########################################
# Query: grasp the hanger.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the hanger')
gripper_map = get_gripper_map('open everywhere except 1cm around the hanger')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


*** Error: [Errno 5] Input/output error
########################################
#### parse_query_obj ####
########################################
objects = ['target rack', 'source rack', 'hanger']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


*** Error: [Errno 5] Input/output error
########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the hanger.
affordance_map = get_empty_affordance_map()
hanger = parse_query_obj('hanger')
x, y, z = hanger.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


*** Error: [Errno 5] Input/output error
########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the hanger.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the hanger
hanger = parse_query_obj('hanger')
set_voxel_by_radius(gripper_map, hanger.position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['target rack', 'source rack', 'hanger']
# Query: hanger.
hanger = detect('hanger')
ret_val = hanger


*** Error: 'NoneType' object has no attribute 'astype'
*** Error: [Errno 5] Input/output error




########################## Starting episode #########################
instruction: put the hanger on the other rack
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
########################################
#### planner ####
########################################
objects = ['target rack', 'source rack', 'hanger']
# Query: put the hanger on the other rack.
composer("grasp the hanger")
composer("back to default pose")
composer("move to 10cm on top of the target rack")
composer("open gripper")
composer("back to default pose")


*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error




########################## Starting episode #########################
instruction: push down the yellow button
########################################
#### planner ####
########################################
objects = ['target button']
# Query: push down the yellow button.
composer("push down the target button")


*** Error: [Errno 5] Input/output error
########################################
#### composer ####
########################################
# Query: push down the target button.
movable = parse_query_obj('target button')
affordance_map = get_affordance_map('a point 10cm below the target button')
execute(movable, affordance_map=affordance_map)


*** Error: [Errno 5] Input/output error
########################################
#### parse_query_obj ####
########################################
objects = ['target button']
# Query: target button.
target_button = detect('target button')
ret_val = target_button


*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
########################################
#### get_affordance_map ####
########################################
# Query: a point 10cm below the target button.
affordance_map = get_empty_affordance_map()
target_button = parse_query_obj('target button')
(min_x, min_y, min_z), (max_x, max_y, max_z) = target_button.aabb
center_x, center_y, center_z = target_button.position
# 10cm below so we subtract from z-axis
x = center_x
y = center_y
z = min_z - cm2index(10, 'z')
affordance_map[x, y, z] = 1
ret_val = affordance_map


*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
########################################
#### parse_query_obj ####
########################################
objects = ['target button']
# Query: target button.
target_button = detect('target button')
ret_val = target_button


*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error




########################## Starting episode #########################
instruction: pick up the hanger and place it on the other rack
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
########################################
#### planner ####
########################################
objects = ['target rack', 'source rack', 'hanger']
# Query: pick up the hanger and place it on the other rack.
composer("grasp the hanger")
composer("back to default pose")
composer("move to 10cm on top of the target rack")
composer("open gripper")
composer("back to default pose")


*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error
*** Error: [Errno 5] Input/output error




########################## Starting episode #########################
instruction: press the yellow button
########################################
#### planner ####
########################################
objects = ['target button']
# Query: press the yellow button.
composer("press the target button")


########################################
#### composer ####
########################################
# Query: press the target button.
movable = parse_query_obj('target button')
affordance_map = get_affordance_map('a point 1cm into the target button')
execute(movable, affordance_map=affordance_map)


########################################
#### parse_query_obj ####
########################################
objects = ['target button']
# Query: target button.
target_button = detect('target button')
ret_val = target_button


########################################
#### get_affordance_map ####
########################################
# Query: a point 1cm into the target button.
affordance_map = get_empty_affordance_map()
target_button = parse_query_obj('target button')
# negative normal because we are moving into the button.
moving_dir = -target_button.normal
affordance_xyz = target_button.position + cm2index(1, moving_dir)
affordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1
ret_val = affordance_map


########################################
#### parse_query_obj ####
########################################
objects = ['target button']
# Query: target button.
target_button = detect('target button')
ret_val = target_button






########################## Starting episode #########################
instruction: move hanger onto the other rackmove the hanger from one rack to the other
########################################
#### planner ####
########################################
objects = ['target rack', 'source rack', 'hanger']
# Query: move hanger onto the other rackmove the hanger from one rack to the other.
composer("grasp the hanger")
composer("back to default pose")
composer("move to 10cm on top of the source rack")
composer("open gripper")
composer("back to default pose")
composer("move to 10cm on top of the target rack")
composer("close the gripper")
composer("back to default pose")


########################################
#### composer ####
########################################
# Query: grasp the hanger.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the hanger')
gripper_map = get_gripper_map('open everywhere except 1cm around the hanger')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['target rack', 'source rack', 'hanger']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point at the center of the hanger.
affordance_map = get_empty_affordance_map()
hanger = parse_query_obj('hanger')
x, y, z = hanger.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the hanger.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the hanger
hanger = parse_query_obj('hanger')
set_voxel_by_radius(gripper_map, hanger.position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['target rack', 'source rack', 'hanger']
# Query: hanger.
hanger = detect('hanger')
ret_val = hanger






########################## Starting episode #########################
instruction: push the green button




########################## Starting episode #########################
instruction: press the button with the white base




########################## Starting episode #########################
instruction: press the rose button




########################## Starting episode #########################
instruction: push down the gray button
########################################
#### planner ####
########################################
objects = ['target button']
# Query: push down the gray button.
composer("grasp the target button")
composer("move down to push the button")
composer("back to default pose")
# done


########################################
#### composer ####
########################################
# Query: grasp the target button.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('the target button')
gripper_map = get_gripper_map('open everywhere except 1cm around the target button')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


########################################
#### parse_query_obj ####
########################################
objects = ['target button']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: the target button.
affordance_map = get_empty_affordance_map()
target_button = parse_query_obj('target button')
affordance_map = target_button.occupancy_map
ret_val = affordance_map


########################################
#### get_gripper_map ####
########################################
# Query: open everywhere except 1cm around the target button.
# open everywhere
gripper_map = get_empty_gripper_map()
gripper_map[:, :, :] = 1
# close when 1cm around the target button
target_button = parse_query_obj('target button')
set_voxel_by_radius(gripper_map, target_button.position, radius_cm=1, value=0)
ret_val = gripper_map


########################################
#### parse_query_obj ####
########################################
objects = ['target button']
# Query: target button.
target_button = detect('target button')
ret_val = target_button


########################################
#### parse_query_obj ####
########################################
objects = ['target button']
# Query: target button.
target_button = detect('target button')
ret_val = target_button


Reward: 0.0
##############################


########################################
#### composer ####
########################################
# Query: move down to push the button.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point below the button')
execute(movable, affordance_map=affordance_map)


########################################
#### parse_query_obj ####
########################################
objects = ['target button']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


########################################
#### get_affordance_map ####
########################################
# Query: a point below the button.
affordance_map = get_empty_affordance_map()
button = parse_query_obj('button')
(min_x, min_y, min_z), (max_x, max_y, max_z) = button.aabb
center_x, center_y, center_z = button.position
# below the button so we subtract from z-axis
x = center_x
y = center_y
z = min_z - cm2index(1, 'z')
affordance_map[x, y, z] = 1
ret_val = affordance_map


########################################
#### parse_query_obj ####
########################################
objects = ['target button']
# Query: button.
button.
target_button = detect('target button')
ret_val = target_button


